
FanController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000e24  00000eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800076  00800076  00000ece  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000161c  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cb  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d08  00000000  00000000  00003087  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00003d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078f  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001237  00000000  00000000  000047eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005a22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 88 03 	jmp	0x710	; 0x710 <__vector_10>
  2c:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  8a:	0c 94 10 07 	jmp	0xe20	; 0xe20 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_8_bit_sendCommand>:
 * @retval		:none
 * @Note		:make RS pin low(command) , make RW pin low(write) , Generate high to low pulse (E)pin
 */
void LCD_8_bit_sendCommand(uint8_t cmnd)
{
	LCD_Data_Port = cmnd;
  92:	85 bb       	out	0x15, r24	; 21
	CLEAR_func(LCD_Command_Port, RS);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	82 bb       	out	0x12, r24	; 18
	CLEAR_func(LCD_Command_Port,RW);
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	82 bb       	out	0x12, r24	; 18
	SET_func(LCD_Command_Port, E);
  a0:	82 b3       	in	r24, 0x12	; 18
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_8_bit_sendCommand+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_8_bit_sendCommand+0x1c>
	_delay_us(1);
	CLEAR_func(LCD_Command_Port,E);
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8f e6       	ldi	r24, 0x6F	; 111
  b6:	97 e1       	ldi	r25, 0x17	; 23
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_8_bit_sendCommand+0x26>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_8_bit_sendCommand+0x2c>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <LCD_8_bit_init>:
 * @retval		:none
 * @Note		:none
 */
void LCD_8_bit_init(void)
{
	LCD_Command_Dir = 0XFF; //Make LCD command port direction as o/p
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	81 bb       	out	0x11, r24	; 17
	LCD_Data_Dir = 0XFF;    //Make LCD data port direction as o/p
  c6:	84 bb       	out	0x14, r24	; 20
  c8:	8f e3       	ldi	r24, 0x3F	; 63
  ca:	9c e9       	ldi	r25, 0x9C	; 156
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_8_bit_init+0xa>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_8_bit_init+0x10>
  d2:	00 00       	nop
	
	_delay_ms(20);
	LCD_8_bit_sendCommand(LCD_8BIT_MODE_2LINES);
  d4:	88 e3       	ldi	r24, 0x38	; 56
  d6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(LCD_DISP_ON_Cursor_OFF);
  da:	8c e0       	ldi	r24, 0x0C	; 12
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(LCD_INC_CURSOR);
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(LCD_CLEAR_SCREEN);	
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
  ec:	08 95       	ret

000000ee <LCD_8_bit_sendChar>:
 * @retval		:none
 * @Note		:make RS pin high(data register) , make RW pin low(write) , Generate high to low pulse (E)pin
 */
void LCD_8_bit_sendChar(uint8_t char_data)
{
	LCD_Data_Port = char_data;
  ee:	85 bb       	out	0x15, r24	; 21
	SET_func(LCD_Command_Port, RS);
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	82 bb       	out	0x12, r24	; 18
	CLEAR_func(LCD_Command_Port, RW);
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	82 bb       	out	0x12, r24	; 18
	SET_func(LCD_Command_Port, E);
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_8_bit_sendChar+0x16>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_8_bit_sendChar+0x1c>
	_delay_us(1);
	CLEAR_func(LCD_Command_Port, E);
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f ec       	ldi	r24, 0xCF	; 207
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_8_bit_sendChar+0x26>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_8_bit_sendChar+0x2c>
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <LCD_8_bit_sendString>:
 * @param(in)	:*str
 * @retval		:none
 * @Note		: for loop is used for sending  a char in each iteration , null char->end of the string
 */
void LCD_8_bit_sendString(uint8_t *str)
{
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	8c 01       	movw	r16, r24
	uint16_t i;
	for(i=0; str[i]!=0; i++)
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	03 c0       	rjmp	.+6      	; 0x134 <LCD_8_bit_sendString+0x16>
	{
		LCD_8_bit_sendChar(str[i]);
 12e:	0e 94 77 00 	call	0xee	; 0xee <LCD_8_bit_sendChar>
 * @Note		: for loop is used for sending  a char in each iteration , null char->end of the string
 */
void LCD_8_bit_sendString(uint8_t *str)
{
	uint16_t i;
	for(i=0; str[i]!=0; i++)
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	f8 01       	movw	r30, r16
 136:	ec 0f       	add	r30, r28
 138:	fd 1f       	adc	r31, r29
 13a:	80 81       	ld	r24, Z
 13c:	81 11       	cpse	r24, r1
 13e:	f7 cf       	rjmp	.-18     	; 0x12e <LCD_8_bit_sendString+0x10>
	{
		LCD_8_bit_sendChar(str[i]);
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

0000014a <LCD_GotoXY>:
void LCD_GotoXY(uint8_t line, uint8_t position )
{

	if(line==1)
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	39 f4       	brne	.+14     	; 0x15c <LCD_GotoXY+0x12>
	{
		if (position < 16 && position >=0)
 14e:	60 31       	cpi	r22, 0x10	; 16
 150:	68 f4       	brcc	.+26     	; 0x16c <LCD_GotoXY+0x22>
		LCD_8_bit_sendCommand(LCD_BEGIN_AT_FIRST_LINE+position);
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	86 0f       	add	r24, r22
 156:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
 15a:	08 95       	ret
	}
	else if (line==2)
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	31 f4       	brne	.+12     	; 0x16c <LCD_GotoXY+0x22>
	{
		if (position < 16 && position >=0)
 160:	60 31       	cpi	r22, 0x10	; 16
 162:	20 f4       	brcc	.+8      	; 0x16c <LCD_GotoXY+0x22>
		LCD_8_bit_sendCommand(LCD_BEGIN_AT_SECOND_LINE+ position);
 164:	80 ec       	ldi	r24, 0xC0	; 192
 166:	86 0f       	add	r24, r22
 168:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
 16c:	08 95       	ret

0000016e <LCD_display_number>:
	}
}
void LCD_display_number (uint8_t Number )
{
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	00 d0       	rcall	.+0      	; 0x178 <LCD_display_number+0xa>
 178:	00 d0       	rcall	.+0      	; 0x17a <LCD_display_number+0xc>
 17a:	00 d0       	rcall	.+0      	; 0x17c <LCD_display_number+0xe>
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62

	char  str[6];

	sprintf(str,"%d",Number);	// Adjust the formatting to your liking.
 180:	1f 92       	push	r1
 182:	8f 93       	push	r24
 184:	80 e6       	ldi	r24, 0x60	; 96
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9f 93       	push	r25
 18a:	8f 93       	push	r24
 18c:	8e 01       	movw	r16, r28
 18e:	0f 5f       	subi	r16, 0xFF	; 255
 190:	1f 4f       	sbci	r17, 0xFF	; 255
 192:	1f 93       	push	r17
 194:	0f 93       	push	r16
 196:	0e 94 26 04 	call	0x84c	; 0x84c <sprintf>

	LCD_8_bit_sendString (str) ;
 19a:	c8 01       	movw	r24, r16
 19c:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_8_bit_sendString>

}
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	26 96       	adiw	r28, 0x06	; 6
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	08 95       	ret

000001c2 <main>:
#include "MCAL/ADC/ADC.h"
#include "MCAL/Timer/Timmer.h"


int main(void)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
 1ca:	60 97       	sbiw	r28, 0x10	; 16
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	f8 94       	cli
 1d0:	de bf       	out	0x3e, r29	; 62
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	cd bf       	out	0x3d, r28	; 61
	//INIT Timer
	TIMER0_Config_t timercfg;
	timercfg.Timer_Mode = Timer_Mode_FastPWM_noninterval;
 1d6:	88 e6       	ldi	r24, 0x68	; 104
 1d8:	89 83       	std	Y+1, r24	; 0x01
	timercfg.Timer_clock_source = Timer_clock_source_DIVISION_FACTOR_8;
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	8a 83       	std	Y+2, r24	; 0x02
	timercfg.IRQ_Enable = IRQ_Enable_NON;
 1de:	1b 82       	std	Y+3, r1	; 0x03
	Timer0_Init(&timercfg);
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	0e 94 2e 03 	call	0x65c	; 0x65c <Timer0_Init>
	
	//INIT ADC
	ADC_Config_t ADCcfg;
	ADCcfg.ADC_Mode = ADC_Mode_single_conversion;
 1e8:	1e 82       	std	Y+6, r1	; 0x06
	ADCcfg.ADC_Prescaler = ADC_Prescaler_2;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	89 87       	std	Y+9, r24	; 0x09
	ADCcfg.ADC_Result_Presentation = ADC_Result_Presentation_Right;
 1ee:	18 86       	std	Y+8, r1	; 0x08
	ADCcfg.ADC_Voltage_Reference = ADC_Voltage_Reference_AVCC;
 1f0:	80 e4       	ldi	r24, 0x40	; 64
 1f2:	8f 83       	std	Y+7, r24	; 0x07
	ADCcfg.ADC_IRQ = ADC_IRQ_Disable;
 1f4:	1a 86       	std	Y+10, r1	; 0x0a
	ADC_INIT(&ADCcfg);
 1f6:	ce 01       	movw	r24, r28
 1f8:	06 96       	adiw	r24, 0x06	; 6
 1fa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <ADC_INIT>
	
	//INIT LCD
	LCD_8_bit_init();
 1fe:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_8_bit_init>
	
	
	//INIT motor
	DIO_DIRECTION_INIT(DIO_PIN0,PORTB,DIO_OUTPUT);
 202:	68 b3       	in	r22, 0x18	; 24
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <DIO_DIRECTION_INIT>
	DIO_DIRECTION_INIT(DIO_PIN1,PORTB,DIO_OUTPUT);
 20c:	68 b3       	in	r22, 0x18	; 24
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <DIO_DIRECTION_INIT>
	
	DIO_WRITE(DIO_PIN0,PORTB,DIO_HIGH);
 216:	68 b3       	in	r22, 0x18	; 24
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 8c 02 	call	0x518	; 0x518 <DIO_WRITE>
	DIO_WRITE(DIO_PIN1,PORTB,DIO_LOW);
 220:	68 b3       	in	r22, 0x18	; 24
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 8c 02 	call	0x518	; 0x518 <DIO_WRITE>
	
	
	LCD_8_bit_sendString("Temp: ");
 22a:	83 e6       	ldi	r24, 0x63	; 99
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_8_bit_sendString>
	LCD_GotoXY(2,0);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_GotoXY>
	LCD_8_bit_sendString("Fan Speed: ");
 23a:	8a e6       	ldi	r24, 0x6A	; 106
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_8_bit_sendString>
	
	uint32_t ADCresult=0;
 242:	1d 86       	std	Y+13, r1	; 0x0d
 244:	1e 86       	std	Y+14, r1	; 0x0e
 246:	1f 86       	std	Y+15, r1	; 0x0f
 248:	18 8a       	std	Y+16, r1	; 0x10
	uint8_t temp=0;
	uint8_t speed=0;
 24a:	f1 2c       	mov	r15, r1
    /* Replace with your application code */
    while (1) 
    {
		LCD_GotoXY(1,6);
 24c:	66 e0       	ldi	r22, 0x06	; 6
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_GotoXY>
		ADC_Read_Channel(ADC0, &ADCresult, polling_enable);
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	be 01       	movw	r22, r28
 258:	63 5f       	subi	r22, 0xF3	; 243
 25a:	7f 4f       	sbci	r23, 0xFF	; 255
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 9c 01 	call	0x338	; 0x338 <ADC_Read_Channel>
		temp = (((ADCresult * 5000) / 1024) / 10);
 262:	2d 85       	ldd	r18, Y+13	; 0x0d
 264:	3e 85       	ldd	r19, Y+14	; 0x0e
 266:	4f 85       	ldd	r20, Y+15	; 0x0f
 268:	58 89       	ldd	r21, Y+16	; 0x10
 26a:	a8 e8       	ldi	r26, 0x88	; 136
 26c:	b3 e1       	ldi	r27, 0x13	; 19
 26e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__muluhisi3>
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	38 e2       	ldi	r19, 0x28	; 40
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__udivmodsi4>
 27e:	12 2f       	mov	r17, r18
		LCD_display_number(temp);
 280:	82 2f       	mov	r24, r18
 282:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_display_number>
		LCD_8_bit_sendChar('C');
 286:	83 e4       	ldi	r24, 0x43	; 67
 288:	0e 94 77 00 	call	0xee	; 0xee <LCD_8_bit_sendChar>
		
		if(temp < 25)
 28c:	19 31       	cpi	r17, 0x19	; 25
 28e:	80 f0       	brcs	.+32     	; 0x2b0 <main+0xee>
		{
			speed =0;
		}
		else if(temp>=25 && temp <35)
 290:	87 ee       	ldi	r24, 0xE7	; 231
 292:	81 0f       	add	r24, r17
 294:	8a 30       	cpi	r24, 0x0A	; 10
 296:	70 f0       	brcs	.+28     	; 0x2b4 <main+0xf2>
		{
			speed = 25;
		}
		else if(temp>=35 && temp <45)
 298:	8d ed       	ldi	r24, 0xDD	; 221
 29a:	81 0f       	add	r24, r17
 29c:	8a 30       	cpi	r24, 0x0A	; 10
 29e:	78 f0       	brcs	.+30     	; 0x2be <main+0xfc>
		{
			speed = 50;
		}
		else if(temp>=45 && temp <55)
 2a0:	83 ed       	ldi	r24, 0xD3	; 211
 2a2:	81 0f       	add	r24, r17
 2a4:	8a 30       	cpi	r24, 0x0A	; 10
 2a6:	80 f0       	brcs	.+32     	; 0x2c8 <main+0x106>
		{
			speed = 75;
		}
		else if(temp>=55 && temp <65)
 2a8:	17 53       	subi	r17, 0x37	; 55
 2aa:	1a 30       	cpi	r17, 0x0A	; 10
 2ac:	90 f0       	brcs	.+36     	; 0x2d2 <main+0x110>
 2ae:	15 c0       	rjmp	.+42     	; 0x2da <main+0x118>
		LCD_display_number(temp);
		LCD_8_bit_sendChar('C');
		
		if(temp < 25)
		{
			speed =0;
 2b0:	f1 2c       	mov	r15, r1
 2b2:	13 c0       	rjmp	.+38     	; 0x2da <main+0x118>
		}
		else if(temp>=25 && temp <35)
		{
			speed = 25;
 2b4:	0f 2e       	mov	r0, r31
 2b6:	f9 e1       	ldi	r31, 0x19	; 25
 2b8:	ff 2e       	mov	r15, r31
 2ba:	f0 2d       	mov	r31, r0
 2bc:	0e c0       	rjmp	.+28     	; 0x2da <main+0x118>
		}
		else if(temp>=35 && temp <45)
		{
			speed = 50;
 2be:	0f 2e       	mov	r0, r31
 2c0:	f2 e3       	ldi	r31, 0x32	; 50
 2c2:	ff 2e       	mov	r15, r31
 2c4:	f0 2d       	mov	r31, r0
 2c6:	09 c0       	rjmp	.+18     	; 0x2da <main+0x118>
		}
		else if(temp>=45 && temp <55)
		{
			speed = 75;
 2c8:	0f 2e       	mov	r0, r31
 2ca:	fb e4       	ldi	r31, 0x4B	; 75
 2cc:	ff 2e       	mov	r15, r31
 2ce:	f0 2d       	mov	r31, r0
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <main+0x118>
		}
		else if(temp>=55 && temp <65)
		{
			speed = 98;
 2d2:	0f 2e       	mov	r0, r31
 2d4:	f2 e6       	ldi	r31, 0x62	; 98
 2d6:	ff 2e       	mov	r15, r31
 2d8:	f0 2d       	mov	r31, r0
		}
		Timer0_PWM_DutyCycle(speed);
 2da:	8f 2d       	mov	r24, r15
 2dc:	0e 94 af 03 	call	0x75e	; 0x75e <Timer0_PWM_DutyCycle>
		
    }
 2e0:	b5 cf       	rjmp	.-150    	; 0x24c <main+0x8a>

000002e2 <ADC_INIT>:
	}
 	  
}
void ADC_DEINIT(void){
	ADMUX =  0x00;
	ADCSRA = 0x00;	
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
 2e8:	87 e0       	ldi	r24, 0x07	; 7
 2ea:	fe 01       	movw	r30, r28
 2ec:	a6 e7       	ldi	r26, 0x76	; 118
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	01 90       	ld	r0, Z+
 2f2:	0d 92       	st	X+, r0
 2f4:	8a 95       	dec	r24
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <ADC_INIT+0xe>
 2f8:	97 b1       	in	r25, 0x07	; 7
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	89 2b       	or	r24, r25
 2fe:	87 b9       	out	0x07, r24	; 7
 300:	97 b1       	in	r25, 0x07	; 7
 302:	8a 81       	ldd	r24, Y+2	; 0x02
 304:	89 2b       	or	r24, r25
 306:	87 b9       	out	0x07, r24	; 7
 308:	96 b1       	in	r25, 0x06	; 6
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
 30c:	89 2b       	or	r24, r25
 30e:	86 b9       	out	0x06, r24	; 6
 310:	96 b1       	in	r25, 0x06	; 6
 312:	8c 81       	ldd	r24, Y+4	; 0x04
 314:	89 2b       	or	r24, r25
 316:	86 b9       	out	0x06, r24	; 6
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	88 30       	cpi	r24, 0x08	; 8
 31c:	09 f4       	brne	.+2      	; 0x320 <ADC_INIT+0x3e>
 31e:	78 94       	sei
 320:	86 b1       	in	r24, 0x06	; 6
 322:	80 68       	ori	r24, 0x80	; 128
 324:	86 b9       	out	0x06, r24	; 6
 326:	88 81       	ld	r24, Y
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	19 f4       	brne	.+6      	; 0x332 <ADC_INIT+0x50>
 32c:	86 b1       	in	r24, 0x06	; 6
 32e:	80 64       	ori	r24, 0x40	; 64
 330:	86 b9       	out	0x06, r24	; 6
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <ADC_Read_Channel>:
}
void ADC_Read_Channel(channel_select_t channel , uint16_t* result ,Polling_Mechanism_t polling ){
	// clear selected channel to select another channel
	CLEAR_func(ADMUX , MUX0);
 338:	97 b1       	in	r25, 0x07	; 7
 33a:	9e 7f       	andi	r25, 0xFE	; 254
 33c:	97 b9       	out	0x07, r25	; 7
	CLEAR_func(ADMUX , MUX1);
 33e:	97 b1       	in	r25, 0x07	; 7
 340:	9d 7f       	andi	r25, 0xFD	; 253
 342:	97 b9       	out	0x07, r25	; 7
	CLEAR_func(ADMUX , MUX2);
 344:	97 b1       	in	r25, 0x07	; 7
 346:	9b 7f       	andi	r25, 0xFB	; 251
 348:	97 b9       	out	0x07, r25	; 7
	CLEAR_func(ADMUX , MUX3);
 34a:	97 b1       	in	r25, 0x07	; 7
 34c:	97 7f       	andi	r25, 0xF7	; 247
 34e:	97 b9       	out	0x07, r25	; 7
	CLEAR_func(ADMUX , MUX4);
 350:	97 b1       	in	r25, 0x07	; 7
 352:	9f 7e       	andi	r25, 0xEF	; 239
 354:	97 b9       	out	0x07, r25	; 7
	
	//1: select channel
	ADMUX |= ((uint8_t)channel << MUX0);
 356:	97 b1       	in	r25, 0x07	; 7
 358:	98 2b       	or	r25, r24
 35a:	97 b9       	out	0x07, r25	; 7
	
	//2: make pin as an input
	CLEAR_func(DDRA , channel);
 35c:	5a b3       	in	r21, 0x1a	; 26
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	f9 01       	movw	r30, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <ADC_Read_Channel+0x32>
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	8a 95       	dec	r24
 36c:	e2 f7       	brpl	.-8      	; 0x366 <ADC_Read_Channel+0x2e>
 36e:	cf 01       	movw	r24, r30
 370:	80 95       	com	r24
 372:	85 23       	and	r24, r21
 374:	8a bb       	out	0x1a, r24	; 26
	
	//3: start conversion
	if (G_ADC_cfg.ADC_Mode == ADC_Mode_single_conversion)
 376:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 37a:	81 11       	cpse	r24, r1
 37c:	03 c0       	rjmp	.+6      	; 0x384 <ADC_Read_Channel+0x4c>
	{
		SET_func(ADCSRA , ADSC);
 37e:	86 b1       	in	r24, 0x06	; 6
 380:	80 64       	ori	r24, 0x40	; 64
 382:	86 b9       	out	0x06, r24	; 6
	}
	
	//4: wait until ADC conversion complete
	if (polling == polling_enable)
 384:	41 30       	cpi	r20, 0x01	; 1
 386:	11 f5       	brne	.+68     	; 0x3cc <ADC_Read_Channel+0x94>
	{
		while (!READ_func(ADCSRA , ADIF));
 388:	34 9b       	sbis	0x06, 4	; 6
 38a:	fe cf       	rjmp	.-4      	; 0x388 <ADC_Read_Channel+0x50>
		//5: read conversion result
		if (G_ADC_cfg.ADC_Result_Presentation == ADC_Result_Presentation_Left)
 38c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end+0x2>
 390:	80 32       	cpi	r24, 0x20	; 32
 392:	81 f4       	brne	.+32     	; 0x3b4 <ADC_Read_Channel+0x7c>
		{
			*result =(((ADCL & 0XC0) >> 6 ) | (ADCH << 2)) ;
 394:	24 b1       	in	r18, 0x04	; 4
 396:	22 95       	swap	r18
 398:	26 95       	lsr	r18
 39a:	26 95       	lsr	r18
 39c:	23 70       	andi	r18, 0x03	; 3
 39e:	85 b1       	in	r24, 0x05	; 5
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	82 2b       	or	r24, r18
 3ac:	fb 01       	movw	r30, r22
 3ae:	91 83       	std	Z+1, r25	; 0x01
 3b0:	80 83       	st	Z, r24
 3b2:	0c c0       	rjmp	.+24     	; 0x3cc <ADC_Read_Channel+0x94>
		}else if (G_ADC_cfg.ADC_Result_Presentation == ADC_Result_Presentation_Right)
 3b4:	81 11       	cpse	r24, r1
 3b6:	0a c0       	rjmp	.+20     	; 0x3cc <ADC_Read_Channel+0x94>
		{
			*result =(ADCL | ((ADCH & 0x03) << 8)) ;
 3b8:	24 b1       	in	r18, 0x04	; 4
 3ba:	85 b1       	in	r24, 0x05	; 5
 3bc:	83 70       	andi	r24, 0x03	; 3
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	98 2f       	mov	r25, r24
 3c2:	88 27       	eor	r24, r24
 3c4:	82 2b       	or	r24, r18
 3c6:	fb 01       	movw	r30, r22
 3c8:	91 83       	std	Z+1, r25	; 0x01
 3ca:	80 83       	st	Z, r24
		}
	}
	//6: clear ADIF flag
	CLEAR_func(ADCSRA , ADIF);
 3cc:	86 b1       	in	r24, 0x06	; 6
 3ce:	8f 7e       	andi	r24, 0xEF	; 239
 3d0:	86 b9       	out	0x06, r24	; 6
 3d2:	08 95       	ret

000003d4 <DIO_DIRECTION_INIT>:
 *  Author: MAI
 */ 
#include "DIO.h"
#if DIO_PIN_CFG
std_ReturnType_t DIO_DIRECTION_INIT(uint8_t pinNum, uint8_t port,direction_t direc){
	if(pinNum>pin_max){return E_NOT_OK;}
 3d4:	88 30       	cpi	r24, 0x08	; 8
 3d6:	08 f0       	brcs	.+2      	; 0x3da <DIO_DIRECTION_INIT+0x6>
 3d8:	93 c0       	rjmp	.+294    	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
	else{
		switch(port){
 3da:	62 36       	cpi	r22, 0x62	; 98
 3dc:	69 f1       	breq	.+90     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 3de:	18 f4       	brcc	.+6      	; 0x3e6 <DIO_DIRECTION_INIT+0x12>
 3e0:	61 36       	cpi	r22, 0x61	; 97
 3e2:	41 f0       	breq	.+16     	; 0x3f4 <DIO_DIRECTION_INIT+0x20>
 3e4:	8f c0       	rjmp	.+286    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 3e6:	63 36       	cpi	r22, 0x63	; 99
 3e8:	09 f4       	brne	.+2      	; 0x3ec <DIO_DIRECTION_INIT+0x18>
 3ea:	48 c0       	rjmp	.+144    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 3ec:	64 36       	cpi	r22, 0x64	; 100
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <DIO_DIRECTION_INIT+0x1e>
 3f0:	66 c0       	rjmp	.+204    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 3f2:	88 c0       	rjmp	.+272    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
				case 'a':
				if(direc==DIO_INPUT){CLEAR_func(DDRA,pinNum);}
 3f4:	41 11       	cpse	r20, r1
 3f6:	0f c0       	rjmp	.+30     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3f8:	4a b3       	in	r20, 0x1a	; 26
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	b9 01       	movw	r22, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	66 0f       	add	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	8a 95       	dec	r24
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	cb 01       	movw	r24, r22
 40c:	80 95       	com	r24
 40e:	84 23       	and	r24, r20
 410:	8a bb       	out	0x1a, r24	; 26
				else if(direc==DIO_OUTPUT){SET_func(DDRD,pinNum);}
				else{return E_NOT_OK;}
				break;
				}
	}
	return E_OK;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	08 95       	ret
	if(pinNum>pin_max){return E_NOT_OK;}
	else{
		switch(port){
				case 'a':
				if(direc==DIO_INPUT){CLEAR_func(DDRA,pinNum);}
				else if(direc==DIO_OUTPUT){SET_func(DDRA,pinNum);}
 416:	41 30       	cpi	r20, 0x01	; 1
 418:	09 f0       	breq	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	76 c0       	rjmp	.+236    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 41c:	4a b3       	in	r20, 0x1a	; 26
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	b9 01       	movw	r22, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	8a 95       	dec	r24
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	cb 01       	movw	r24, r22
 430:	84 2b       	or	r24, r20
 432:	8a bb       	out	0x1a, r24	; 26
				else if(direc==DIO_OUTPUT){SET_func(DDRD,pinNum);}
				else{return E_NOT_OK;}
				break;
				}
	}
	return E_OK;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	08 95       	ret
				if(direc==DIO_INPUT){CLEAR_func(DDRA,pinNum);}
				else if(direc==DIO_OUTPUT){SET_func(DDRA,pinNum);}
				else{return E_NOT_OK;}
				break;
				case 'b':
				if(direc==DIO_INPUT){CLEAR_func(DDRB,pinNum);}
 438:	41 11       	cpse	r20, r1
 43a:	0f c0       	rjmp	.+30     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 43c:	47 b3       	in	r20, 0x17	; 23
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	b9 01       	movw	r22, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	8a 95       	dec	r24
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	cb 01       	movw	r24, r22
 450:	80 95       	com	r24
 452:	84 23       	and	r24, r20
 454:	87 bb       	out	0x17, r24	; 23
				else if(direc==DIO_OUTPUT){SET_func(DDRD,pinNum);}
				else{return E_NOT_OK;}
				break;
				}
	}
	return E_OK;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	08 95       	ret
				else if(direc==DIO_OUTPUT){SET_func(DDRA,pinNum);}
				else{return E_NOT_OK;}
				break;
				case 'b':
				if(direc==DIO_INPUT){CLEAR_func(DDRB,pinNum);}
				else if(direc==DIO_OUTPUT){SET_func(DDRB,pinNum);}
 45a:	41 30       	cpi	r20, 0x01	; 1
 45c:	09 f0       	breq	.+2      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45e:	56 c0       	rjmp	.+172    	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 460:	47 b3       	in	r20, 0x17	; 23
 462:	21 e0       	ldi	r18, 0x01	; 1
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	b9 01       	movw	r22, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	8a 95       	dec	r24
 470:	e2 f7       	brpl	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 472:	cb 01       	movw	r24, r22
 474:	84 2b       	or	r24, r20
 476:	87 bb       	out	0x17, r24	; 23
				else if(direc==DIO_OUTPUT){SET_func(DDRD,pinNum);}
				else{return E_NOT_OK;}
				break;
				}
	}
	return E_OK;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	08 95       	ret
				if(direc==DIO_INPUT){CLEAR_func(DDRB,pinNum);}
				else if(direc==DIO_OUTPUT){SET_func(DDRB,pinNum);}
				else{return E_NOT_OK;}
				break;
				case 'c':
				if(direc==DIO_INPUT){CLEAR_func(DDRC,pinNum);}
 47c:	41 11       	cpse	r20, r1
 47e:	0f c0       	rjmp	.+30     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 480:	44 b3       	in	r20, 0x14	; 20
 482:	21 e0       	ldi	r18, 0x01	; 1
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	b9 01       	movw	r22, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	8a 95       	dec	r24
 490:	e2 f7       	brpl	.-8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 492:	cb 01       	movw	r24, r22
 494:	80 95       	com	r24
 496:	84 23       	and	r24, r20
 498:	84 bb       	out	0x14, r24	; 20
				else if(direc==DIO_OUTPUT){SET_func(DDRD,pinNum);}
				else{return E_NOT_OK;}
				break;
				}
	}
	return E_OK;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	08 95       	ret
				else if(direc==DIO_OUTPUT){SET_func(DDRB,pinNum);}
				else{return E_NOT_OK;}
				break;
				case 'c':
				if(direc==DIO_INPUT){CLEAR_func(DDRC,pinNum);}
				else if(direc==DIO_OUTPUT){SET_func(DDRC,pinNum);}
 49e:	41 30       	cpi	r20, 0x01	; 1
 4a0:	b9 f5       	brne	.+110    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 4a2:	44 b3       	in	r20, 0x14	; 20
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	b9 01       	movw	r22, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	8a 95       	dec	r24
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4b4:	cb 01       	movw	r24, r22
 4b6:	84 2b       	or	r24, r20
 4b8:	84 bb       	out	0x14, r24	; 20
				else if(direc==DIO_OUTPUT){SET_func(DDRD,pinNum);}
				else{return E_NOT_OK;}
				break;
				}
	}
	return E_OK;
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	08 95       	ret
				if(direc==DIO_INPUT){CLEAR_func(DDRC,pinNum);}
				else if(direc==DIO_OUTPUT){SET_func(DDRC,pinNum);}
				else{return E_NOT_OK;}
				break;
				case 'd':
				if(direc==DIO_INPUT){CLEAR_func(DDRD,pinNum);}
 4be:	41 11       	cpse	r20, r1
 4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4c2:	41 b3       	in	r20, 0x11	; 17
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	b9 01       	movw	r22, r18
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4cc:	66 0f       	add	r22, r22
 4ce:	77 1f       	adc	r23, r23
 4d0:	8a 95       	dec	r24
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4d4:	cb 01       	movw	r24, r22
 4d6:	80 95       	com	r24
 4d8:	84 23       	and	r24, r20
 4da:	81 bb       	out	0x11, r24	; 17
				else if(direc==DIO_OUTPUT){SET_func(DDRD,pinNum);}
				else{return E_NOT_OK;}
				break;
				}
	}
	return E_OK;
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	08 95       	ret
				else if(direc==DIO_OUTPUT){SET_func(DDRC,pinNum);}
				else{return E_NOT_OK;}
				break;
				case 'd':
				if(direc==DIO_INPUT){CLEAR_func(DDRD,pinNum);}
				else if(direc==DIO_OUTPUT){SET_func(DDRD,pinNum);}
 4e0:	41 30       	cpi	r20, 0x01	; 1
 4e2:	c1 f4       	brne	.+48     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 4e4:	41 b3       	in	r20, 0x11	; 17
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	b9 01       	movw	r22, r18
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4ee:	66 0f       	add	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	8a 95       	dec	r24
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4f6:	cb 01       	movw	r24, r22
 4f8:	84 2b       	or	r24, r20
 4fa:	81 bb       	out	0x11, r24	; 17
				else{return E_NOT_OK;}
				break;
				}
	}
	return E_OK;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	08 95       	ret
 *  Author: MAI
 */ 
#include "DIO.h"
#if DIO_PIN_CFG
std_ReturnType_t DIO_DIRECTION_INIT(uint8_t pinNum, uint8_t port,direction_t direc){
	if(pinNum>pin_max){return E_NOT_OK;}
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	08 95       	ret
				else if(direc==DIO_OUTPUT){SET_func(DDRD,pinNum);}
				else{return E_NOT_OK;}
				break;
				}
	}
	return E_OK;
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	08 95       	ret
	else{
		switch(port){
				case 'a':
				if(direc==DIO_INPUT){CLEAR_func(DDRA,pinNum);}
				else if(direc==DIO_OUTPUT){SET_func(DDRA,pinNum);}
				else{return E_NOT_OK;}
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	08 95       	ret
				break;
				case 'b':
				if(direc==DIO_INPUT){CLEAR_func(DDRB,pinNum);}
				else if(direc==DIO_OUTPUT){SET_func(DDRB,pinNum);}
				else{return E_NOT_OK;}
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	08 95       	ret
				break;
				case 'c':
				if(direc==DIO_INPUT){CLEAR_func(DDRC,pinNum);}
				else if(direc==DIO_OUTPUT){SET_func(DDRC,pinNum);}
				else{return E_NOT_OK;}
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret
				break;
				case 'd':
				if(direc==DIO_INPUT){CLEAR_func(DDRD,pinNum);}
				else if(direc==DIO_OUTPUT){SET_func(DDRD,pinNum);}
				else{return E_NOT_OK;}
 514:	80 e0       	ldi	r24, 0x00	; 0
				break;
				}
	}
	return E_OK;
}
 516:	08 95       	ret

00000518 <DIO_WRITE>:
std_ReturnType_t DIO_WRITE(uint8_t pinNum, uint8_t port,logic_t logic){ 
	if (pinNum>pin_max){return E_NOT_OK;}
 518:	88 30       	cpi	r24, 0x08	; 8
 51a:	08 f0       	brcs	.+2      	; 0x51e <DIO_WRITE+0x6>
 51c:	93 c0       	rjmp	.+294    	; 0x644 <DIO_WRITE+0x12c>
	else{
		switch(port){
 51e:	62 36       	cpi	r22, 0x62	; 98
 520:	69 f1       	breq	.+90     	; 0x57c <DIO_WRITE+0x64>
 522:	18 f4       	brcc	.+6      	; 0x52a <DIO_WRITE+0x12>
 524:	61 36       	cpi	r22, 0x61	; 97
 526:	41 f0       	breq	.+16     	; 0x538 <DIO_WRITE+0x20>
 528:	8f c0       	rjmp	.+286    	; 0x648 <DIO_WRITE+0x130>
 52a:	63 36       	cpi	r22, 0x63	; 99
 52c:	09 f4       	brne	.+2      	; 0x530 <DIO_WRITE+0x18>
 52e:	48 c0       	rjmp	.+144    	; 0x5c0 <DIO_WRITE+0xa8>
 530:	64 36       	cpi	r22, 0x64	; 100
 532:	09 f4       	brne	.+2      	; 0x536 <DIO_WRITE+0x1e>
 534:	66 c0       	rjmp	.+204    	; 0x602 <DIO_WRITE+0xea>
 536:	88 c0       	rjmp	.+272    	; 0x648 <DIO_WRITE+0x130>
			case 'a':
			if(logic ==DIO_LOW){CLEAR_func(PORTA,pinNum);}
 538:	41 11       	cpse	r20, r1
 53a:	0f c0       	rjmp	.+30     	; 0x55a <DIO_WRITE+0x42>
 53c:	4b b3       	in	r20, 0x1b	; 27
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	b9 01       	movw	r22, r18
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_WRITE+0x32>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	8a 95       	dec	r24
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_WRITE+0x2e>
 54e:	cb 01       	movw	r24, r22
 550:	80 95       	com	r24
 552:	84 23       	and	r24, r20
 554:	8b bb       	out	0x1b, r24	; 27
			else if(logic ==DIO_HIGH){SET_func(PORTD,pinNum);}
			else{return E_NOT_OK;}
			break;
			}
	}
	return E_OK;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	08 95       	ret
	if (pinNum>pin_max){return E_NOT_OK;}
	else{
		switch(port){
			case 'a':
			if(logic ==DIO_LOW){CLEAR_func(PORTA,pinNum);}
			else if(logic ==DIO_HIGH){SET_func(PORTA,pinNum);}
 55a:	41 30       	cpi	r20, 0x01	; 1
 55c:	09 f0       	breq	.+2      	; 0x560 <DIO_WRITE+0x48>
 55e:	76 c0       	rjmp	.+236    	; 0x64c <DIO_WRITE+0x134>
 560:	4b b3       	in	r20, 0x1b	; 27
 562:	21 e0       	ldi	r18, 0x01	; 1
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	b9 01       	movw	r22, r18
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_WRITE+0x56>
 56a:	66 0f       	add	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	8a 95       	dec	r24
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_WRITE+0x52>
 572:	cb 01       	movw	r24, r22
 574:	84 2b       	or	r24, r20
 576:	8b bb       	out	0x1b, r24	; 27
			else if(logic ==DIO_HIGH){SET_func(PORTD,pinNum);}
			else{return E_NOT_OK;}
			break;
			}
	}
	return E_OK;
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	08 95       	ret
			if(logic ==DIO_LOW){CLEAR_func(PORTA,pinNum);}
			else if(logic ==DIO_HIGH){SET_func(PORTA,pinNum);}
			else{return E_NOT_OK;}
			break;
			case 'b':
			if(logic ==DIO_LOW){CLEAR_func(PORTB,pinNum);}
 57c:	41 11       	cpse	r20, r1
 57e:	0f c0       	rjmp	.+30     	; 0x59e <DIO_WRITE+0x86>
 580:	48 b3       	in	r20, 0x18	; 24
 582:	21 e0       	ldi	r18, 0x01	; 1
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	b9 01       	movw	r22, r18
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_WRITE+0x76>
 58a:	66 0f       	add	r22, r22
 58c:	77 1f       	adc	r23, r23
 58e:	8a 95       	dec	r24
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_WRITE+0x72>
 592:	cb 01       	movw	r24, r22
 594:	80 95       	com	r24
 596:	84 23       	and	r24, r20
 598:	88 bb       	out	0x18, r24	; 24
			else if(logic ==DIO_HIGH){SET_func(PORTD,pinNum);}
			else{return E_NOT_OK;}
			break;
			}
	}
	return E_OK;
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	08 95       	ret
			else if(logic ==DIO_HIGH){SET_func(PORTA,pinNum);}
			else{return E_NOT_OK;}
			break;
			case 'b':
			if(logic ==DIO_LOW){CLEAR_func(PORTB,pinNum);}
			else if(logic ==DIO_HIGH){SET_func(PORTB,pinNum);}
 59e:	41 30       	cpi	r20, 0x01	; 1
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <DIO_WRITE+0x8c>
 5a2:	56 c0       	rjmp	.+172    	; 0x650 <DIO_WRITE+0x138>
 5a4:	48 b3       	in	r20, 0x18	; 24
 5a6:	21 e0       	ldi	r18, 0x01	; 1
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	b9 01       	movw	r22, r18
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_WRITE+0x9a>
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	8a 95       	dec	r24
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_WRITE+0x96>
 5b6:	cb 01       	movw	r24, r22
 5b8:	84 2b       	or	r24, r20
 5ba:	88 bb       	out	0x18, r24	; 24
			else if(logic ==DIO_HIGH){SET_func(PORTD,pinNum);}
			else{return E_NOT_OK;}
			break;
			}
	}
	return E_OK;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	08 95       	ret
			if(logic ==DIO_LOW){CLEAR_func(PORTB,pinNum);}
			else if(logic ==DIO_HIGH){SET_func(PORTB,pinNum);}
			else{return E_NOT_OK;}
			break;
			case 'c':
			if(logic ==DIO_LOW){CLEAR_func(PORTC,pinNum);}
 5c0:	41 11       	cpse	r20, r1
 5c2:	0f c0       	rjmp	.+30     	; 0x5e2 <DIO_WRITE+0xca>
 5c4:	45 b3       	in	r20, 0x15	; 21
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	b9 01       	movw	r22, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_WRITE+0xba>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	8a 95       	dec	r24
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_WRITE+0xb6>
 5d6:	cb 01       	movw	r24, r22
 5d8:	80 95       	com	r24
 5da:	84 23       	and	r24, r20
 5dc:	85 bb       	out	0x15, r24	; 21
			else if(logic ==DIO_HIGH){SET_func(PORTD,pinNum);}
			else{return E_NOT_OK;}
			break;
			}
	}
	return E_OK;
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	08 95       	ret
			else if(logic ==DIO_HIGH){SET_func(PORTB,pinNum);}
			else{return E_NOT_OK;}
			break;
			case 'c':
			if(logic ==DIO_LOW){CLEAR_func(PORTC,pinNum);}
			else if(logic ==DIO_HIGH){SET_func(PORTC,pinNum);}
 5e2:	41 30       	cpi	r20, 0x01	; 1
 5e4:	b9 f5       	brne	.+110    	; 0x654 <DIO_WRITE+0x13c>
 5e6:	45 b3       	in	r20, 0x15	; 21
 5e8:	21 e0       	ldi	r18, 0x01	; 1
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	b9 01       	movw	r22, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_WRITE+0xdc>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	8a 95       	dec	r24
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_WRITE+0xd8>
 5f8:	cb 01       	movw	r24, r22
 5fa:	84 2b       	or	r24, r20
 5fc:	85 bb       	out	0x15, r24	; 21
			else if(logic ==DIO_HIGH){SET_func(PORTD,pinNum);}
			else{return E_NOT_OK;}
			break;
			}
	}
	return E_OK;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	08 95       	ret
			if(logic ==DIO_LOW){CLEAR_func(PORTC,pinNum);}
			else if(logic ==DIO_HIGH){SET_func(PORTC,pinNum);}
			else{return E_NOT_OK;}
			break;
			case 'd':
			if(logic ==DIO_LOW){CLEAR_func(PORTD,pinNum);}
 602:	41 11       	cpse	r20, r1
 604:	0f c0       	rjmp	.+30     	; 0x624 <DIO_WRITE+0x10c>
 606:	42 b3       	in	r20, 0x12	; 18
 608:	21 e0       	ldi	r18, 0x01	; 1
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	b9 01       	movw	r22, r18
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_WRITE+0xfc>
 610:	66 0f       	add	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	8a 95       	dec	r24
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_WRITE+0xf8>
 618:	cb 01       	movw	r24, r22
 61a:	80 95       	com	r24
 61c:	84 23       	and	r24, r20
 61e:	82 bb       	out	0x12, r24	; 18
			else if(logic ==DIO_HIGH){SET_func(PORTD,pinNum);}
			else{return E_NOT_OK;}
			break;
			}
	}
	return E_OK;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	08 95       	ret
			else if(logic ==DIO_HIGH){SET_func(PORTC,pinNum);}
			else{return E_NOT_OK;}
			break;
			case 'd':
			if(logic ==DIO_LOW){CLEAR_func(PORTD,pinNum);}
			else if(logic ==DIO_HIGH){SET_func(PORTD,pinNum);}
 624:	41 30       	cpi	r20, 0x01	; 1
 626:	c1 f4       	brne	.+48     	; 0x658 <DIO_WRITE+0x140>
 628:	42 b3       	in	r20, 0x12	; 18
 62a:	21 e0       	ldi	r18, 0x01	; 1
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	b9 01       	movw	r22, r18
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_WRITE+0x11e>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	8a 95       	dec	r24
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_WRITE+0x11a>
 63a:	cb 01       	movw	r24, r22
 63c:	84 2b       	or	r24, r20
 63e:	82 bb       	out	0x12, r24	; 18
			else{return E_NOT_OK;}
			break;
			}
	}
	return E_OK;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	08 95       	ret
				}
	}
	return E_OK;
}
std_ReturnType_t DIO_WRITE(uint8_t pinNum, uint8_t port,logic_t logic){ 
	if (pinNum>pin_max){return E_NOT_OK;}
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	08 95       	ret
			else if(logic ==DIO_HIGH){SET_func(PORTD,pinNum);}
			else{return E_NOT_OK;}
			break;
			}
	}
	return E_OK;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	08 95       	ret
	else{
		switch(port){
			case 'a':
			if(logic ==DIO_LOW){CLEAR_func(PORTA,pinNum);}
			else if(logic ==DIO_HIGH){SET_func(PORTA,pinNum);}
			else{return E_NOT_OK;}
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	08 95       	ret
			break;
			case 'b':
			if(logic ==DIO_LOW){CLEAR_func(PORTB,pinNum);}
			else if(logic ==DIO_HIGH){SET_func(PORTB,pinNum);}
			else{return E_NOT_OK;}
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	08 95       	ret
			break;
			case 'c':
			if(logic ==DIO_LOW){CLEAR_func(PORTC,pinNum);}
			else if(logic ==DIO_HIGH){SET_func(PORTC,pinNum);}
			else{return E_NOT_OK;}
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	08 95       	ret
			break;
			case 'd':
			if(logic ==DIO_LOW){CLEAR_func(PORTD,pinNum);}
			else if(logic ==DIO_HIGH){SET_func(PORTD,pinNum);}
			else{return E_NOT_OK;}
 658:	80 e0       	ldi	r24, 0x00	; 0
			break;
			}
	}
	return E_OK;
}
 65a:	08 95       	ret

0000065c <Timer0_Init>:
 * @param(in)	:TicksNum: value to set in OCR(compare value must not exceed 255.
 * @retval		:none
 * @Note		:none
 */
void Timer0_SetCompareValue(uint8_t  TicksNum){
	OCR0 = TicksNum;
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	ec 01       	movw	r28, r24
 662:	85 e0       	ldi	r24, 0x05	; 5
 664:	fe 01       	movw	r30, r28
 666:	af e7       	ldi	r26, 0x7F	; 127
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	01 90       	ld	r0, Z+
 66c:	0d 92       	st	X+, r0
 66e:	8a 95       	dec	r24
 670:	e1 f7       	brne	.-8      	; 0x66a <Timer0_Init+0xe>
 672:	93 b7       	in	r25, 0x33	; 51
 674:	88 81       	ld	r24, Y
 676:	89 2b       	or	r24, r25
 678:	83 bf       	out	0x33, r24	; 51
 67a:	88 81       	ld	r24, Y
 67c:	88 36       	cpi	r24, 0x68	; 104
 67e:	11 f0       	breq	.+4      	; 0x684 <Timer0_Init+0x28>
 680:	88 37       	cpi	r24, 0x78	; 120
 682:	19 f4       	brne	.+6      	; 0x68a <Timer0_Init+0x2e>
 684:	87 b3       	in	r24, 0x17	; 23
 686:	88 60       	ori	r24, 0x08	; 8
 688:	87 bb       	out	0x17, r24	; 23
 68a:	93 b7       	in	r25, 0x33	; 51
 68c:	89 81       	ldd	r24, Y+1	; 0x01
 68e:	89 2b       	or	r24, r25
 690:	83 bf       	out	0x33, r24	; 51
 692:	89 81       	ldd	r24, Y+1	; 0x01
 694:	86 50       	subi	r24, 0x06	; 6
 696:	82 30       	cpi	r24, 0x02	; 2
 698:	18 f4       	brcc	.+6      	; 0x6a0 <Timer0_Init+0x44>
 69a:	87 b3       	in	r24, 0x17	; 23
 69c:	8e 7f       	andi	r24, 0xFE	; 254
 69e:	87 bb       	out	0x17, r24	; 23
 6a0:	99 b7       	in	r25, 0x39	; 57
 6a2:	8a 81       	ldd	r24, Y+2	; 0x02
 6a4:	89 2b       	or	r24, r25
 6a6:	89 bf       	out	0x39, r24	; 57
 6a8:	8a 81       	ldd	r24, Y+2	; 0x02
 6aa:	88 23       	and	r24, r24
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <Timer0_Init+0x54>
 6ae:	78 94       	sei
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	9c 81       	ldd	r25, Y+4	; 0x04
 6b4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <GP_IRQ_CallBack+0x1>
 6b8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <GP_IRQ_CallBack>
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <__vector_11>:
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	0f 92       	push	r0
 6ca:	11 24       	eor	r1, r1
 6cc:	2f 93       	push	r18
 6ce:	3f 93       	push	r19
 6d0:	4f 93       	push	r20
 6d2:	5f 93       	push	r21
 6d4:	6f 93       	push	r22
 6d6:	7f 93       	push	r23
 6d8:	8f 93       	push	r24
 6da:	9f 93       	push	r25
 6dc:	af 93       	push	r26
 6de:	bf 93       	push	r27
 6e0:	ef 93       	push	r30
 6e2:	ff 93       	push	r31
 6e4:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <GP_IRQ_CallBack>
 6e8:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <GP_IRQ_CallBack+0x1>
 6ec:	09 95       	icall
 6ee:	ff 91       	pop	r31
 6f0:	ef 91       	pop	r30
 6f2:	bf 91       	pop	r27
 6f4:	af 91       	pop	r26
 6f6:	9f 91       	pop	r25
 6f8:	8f 91       	pop	r24
 6fa:	7f 91       	pop	r23
 6fc:	6f 91       	pop	r22
 6fe:	5f 91       	pop	r21
 700:	4f 91       	pop	r20
 702:	3f 91       	pop	r19
 704:	2f 91       	pop	r18
 706:	0f 90       	pop	r0
 708:	0f be       	out	0x3f, r0	; 63
 70a:	0f 90       	pop	r0
 70c:	1f 90       	pop	r1
 70e:	18 95       	reti

00000710 <__vector_10>:
 710:	1f 92       	push	r1
 712:	0f 92       	push	r0
 714:	0f b6       	in	r0, 0x3f	; 63
 716:	0f 92       	push	r0
 718:	11 24       	eor	r1, r1
 71a:	2f 93       	push	r18
 71c:	3f 93       	push	r19
 71e:	4f 93       	push	r20
 720:	5f 93       	push	r21
 722:	6f 93       	push	r22
 724:	7f 93       	push	r23
 726:	8f 93       	push	r24
 728:	9f 93       	push	r25
 72a:	af 93       	push	r26
 72c:	bf 93       	push	r27
 72e:	ef 93       	push	r30
 730:	ff 93       	push	r31
 732:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <GP_IRQ_CallBack>
 736:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <GP_IRQ_CallBack+0x1>
 73a:	09 95       	icall
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	bf 91       	pop	r27
 742:	af 91       	pop	r26
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	7f 91       	pop	r23
 74a:	6f 91       	pop	r22
 74c:	5f 91       	pop	r21
 74e:	4f 91       	pop	r20
 750:	3f 91       	pop	r19
 752:	2f 91       	pop	r18
 754:	0f 90       	pop	r0
 756:	0f be       	out	0x3f, r0	; 63
 758:	0f 90       	pop	r0
 75a:	1f 90       	pop	r1
 75c:	18 95       	reti

0000075e <Timer0_PWM_DutyCycle>:
 * @param(in)	:DutyCycle .
 * @retval		:none
 * @Note		:none
 */
void Timer0_PWM_DutyCycle(uint8_t DutyCycle){
	if(G_timer_cfg.Timer_Mode == Timer_Mode_FastPWM_noninterval){
 75e:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <G_timer_cfg>
 762:	98 36       	cpi	r25, 0x68	; 104
 764:	51 f4       	brne	.+20     	; 0x77a <Timer0_PWM_DutyCycle+0x1c>
		OCR0 = (0xFF*DutyCycle)/100;
 766:	2f ef       	ldi	r18, 0xFF	; 255
 768:	82 9f       	mul	r24, r18
 76a:	c0 01       	movw	r24, r0
 76c:	11 24       	eor	r1, r1
 76e:	64 e6       	ldi	r22, 0x64	; 100
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	0e 94 c2 03 	call	0x784	; 0x784 <__divmodhi4>
 776:	6c bf       	out	0x3c, r22	; 60
 778:	08 95       	ret
	}
	else if(G_timer_cfg.Timer_Mode == Timer_Mode_FastPWM_interval){
 77a:	98 37       	cpi	r25, 0x78	; 120
 77c:	11 f4       	brne	.+4      	; 0x782 <Timer0_PWM_DutyCycle+0x24>
		OCR0 = (255-DutyCycle);
 77e:	80 95       	com	r24
 780:	8c bf       	out	0x3c, r24	; 60
 782:	08 95       	ret

00000784 <__divmodhi4>:
 784:	97 fb       	bst	r25, 7
 786:	07 2e       	mov	r0, r23
 788:	16 f4       	brtc	.+4      	; 0x78e <__divmodhi4+0xa>
 78a:	00 94       	com	r0
 78c:	07 d0       	rcall	.+14     	; 0x79c <__divmodhi4_neg1>
 78e:	77 fd       	sbrc	r23, 7
 790:	09 d0       	rcall	.+18     	; 0x7a4 <__divmodhi4_neg2>
 792:	0e 94 03 04 	call	0x806	; 0x806 <__udivmodhi4>
 796:	07 fc       	sbrc	r0, 7
 798:	05 d0       	rcall	.+10     	; 0x7a4 <__divmodhi4_neg2>
 79a:	3e f4       	brtc	.+14     	; 0x7aa <__divmodhi4_exit>

0000079c <__divmodhi4_neg1>:
 79c:	90 95       	com	r25
 79e:	81 95       	neg	r24
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	08 95       	ret

000007a4 <__divmodhi4_neg2>:
 7a4:	70 95       	com	r23
 7a6:	61 95       	neg	r22
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255

000007aa <__divmodhi4_exit>:
 7aa:	08 95       	ret

000007ac <__udivmodsi4>:
 7ac:	a1 e2       	ldi	r26, 0x21	; 33
 7ae:	1a 2e       	mov	r1, r26
 7b0:	aa 1b       	sub	r26, r26
 7b2:	bb 1b       	sub	r27, r27
 7b4:	fd 01       	movw	r30, r26
 7b6:	0d c0       	rjmp	.+26     	; 0x7d2 <__udivmodsi4_ep>

000007b8 <__udivmodsi4_loop>:
 7b8:	aa 1f       	adc	r26, r26
 7ba:	bb 1f       	adc	r27, r27
 7bc:	ee 1f       	adc	r30, r30
 7be:	ff 1f       	adc	r31, r31
 7c0:	a2 17       	cp	r26, r18
 7c2:	b3 07       	cpc	r27, r19
 7c4:	e4 07       	cpc	r30, r20
 7c6:	f5 07       	cpc	r31, r21
 7c8:	20 f0       	brcs	.+8      	; 0x7d2 <__udivmodsi4_ep>
 7ca:	a2 1b       	sub	r26, r18
 7cc:	b3 0b       	sbc	r27, r19
 7ce:	e4 0b       	sbc	r30, r20
 7d0:	f5 0b       	sbc	r31, r21

000007d2 <__udivmodsi4_ep>:
 7d2:	66 1f       	adc	r22, r22
 7d4:	77 1f       	adc	r23, r23
 7d6:	88 1f       	adc	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	1a 94       	dec	r1
 7dc:	69 f7       	brne	.-38     	; 0x7b8 <__udivmodsi4_loop>
 7de:	60 95       	com	r22
 7e0:	70 95       	com	r23
 7e2:	80 95       	com	r24
 7e4:	90 95       	com	r25
 7e6:	9b 01       	movw	r18, r22
 7e8:	ac 01       	movw	r20, r24
 7ea:	bd 01       	movw	r22, r26
 7ec:	cf 01       	movw	r24, r30
 7ee:	08 95       	ret

000007f0 <__muluhisi3>:
 7f0:	0e 94 17 04 	call	0x82e	; 0x82e <__umulhisi3>
 7f4:	a5 9f       	mul	r26, r21
 7f6:	90 0d       	add	r25, r0
 7f8:	b4 9f       	mul	r27, r20
 7fa:	90 0d       	add	r25, r0
 7fc:	a4 9f       	mul	r26, r20
 7fe:	80 0d       	add	r24, r0
 800:	91 1d       	adc	r25, r1
 802:	11 24       	eor	r1, r1
 804:	08 95       	ret

00000806 <__udivmodhi4>:
 806:	aa 1b       	sub	r26, r26
 808:	bb 1b       	sub	r27, r27
 80a:	51 e1       	ldi	r21, 0x11	; 17
 80c:	07 c0       	rjmp	.+14     	; 0x81c <__udivmodhi4_ep>

0000080e <__udivmodhi4_loop>:
 80e:	aa 1f       	adc	r26, r26
 810:	bb 1f       	adc	r27, r27
 812:	a6 17       	cp	r26, r22
 814:	b7 07       	cpc	r27, r23
 816:	10 f0       	brcs	.+4      	; 0x81c <__udivmodhi4_ep>
 818:	a6 1b       	sub	r26, r22
 81a:	b7 0b       	sbc	r27, r23

0000081c <__udivmodhi4_ep>:
 81c:	88 1f       	adc	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	5a 95       	dec	r21
 822:	a9 f7       	brne	.-22     	; 0x80e <__udivmodhi4_loop>
 824:	80 95       	com	r24
 826:	90 95       	com	r25
 828:	bc 01       	movw	r22, r24
 82a:	cd 01       	movw	r24, r26
 82c:	08 95       	ret

0000082e <__umulhisi3>:
 82e:	a2 9f       	mul	r26, r18
 830:	b0 01       	movw	r22, r0
 832:	b3 9f       	mul	r27, r19
 834:	c0 01       	movw	r24, r0
 836:	a3 9f       	mul	r26, r19
 838:	70 0d       	add	r23, r0
 83a:	81 1d       	adc	r24, r1
 83c:	11 24       	eor	r1, r1
 83e:	91 1d       	adc	r25, r1
 840:	b2 9f       	mul	r27, r18
 842:	70 0d       	add	r23, r0
 844:	81 1d       	adc	r24, r1
 846:	11 24       	eor	r1, r1
 848:	91 1d       	adc	r25, r1
 84a:	08 95       	ret

0000084c <sprintf>:
 84c:	ae e0       	ldi	r26, 0x0E	; 14
 84e:	b0 e0       	ldi	r27, 0x00	; 0
 850:	ec e2       	ldi	r30, 0x2C	; 44
 852:	f4 e0       	ldi	r31, 0x04	; 4
 854:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__prologue_saves__+0x1c>
 858:	0d 89       	ldd	r16, Y+21	; 0x15
 85a:	1e 89       	ldd	r17, Y+22	; 0x16
 85c:	86 e0       	ldi	r24, 0x06	; 6
 85e:	8c 83       	std	Y+4, r24	; 0x04
 860:	1a 83       	std	Y+2, r17	; 0x02
 862:	09 83       	std	Y+1, r16	; 0x01
 864:	8f ef       	ldi	r24, 0xFF	; 255
 866:	9f e7       	ldi	r25, 0x7F	; 127
 868:	9e 83       	std	Y+6, r25	; 0x06
 86a:	8d 83       	std	Y+5, r24	; 0x05
 86c:	ae 01       	movw	r20, r28
 86e:	47 5e       	subi	r20, 0xE7	; 231
 870:	5f 4f       	sbci	r21, 0xFF	; 255
 872:	6f 89       	ldd	r22, Y+23	; 0x17
 874:	78 8d       	ldd	r23, Y+24	; 0x18
 876:	ce 01       	movw	r24, r28
 878:	01 96       	adiw	r24, 0x01	; 1
 87a:	0e 94 48 04 	call	0x890	; 0x890 <vfprintf>
 87e:	ef 81       	ldd	r30, Y+7	; 0x07
 880:	f8 85       	ldd	r31, Y+8	; 0x08
 882:	e0 0f       	add	r30, r16
 884:	f1 1f       	adc	r31, r17
 886:	10 82       	st	Z, r1
 888:	2e 96       	adiw	r28, 0x0e	; 14
 88a:	e4 e0       	ldi	r30, 0x04	; 4
 88c:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__epilogue_restores__+0x1c>

00000890 <vfprintf>:
 890:	ab e0       	ldi	r26, 0x0B	; 11
 892:	b0 e0       	ldi	r27, 0x00	; 0
 894:	ee e4       	ldi	r30, 0x4E	; 78
 896:	f4 e0       	ldi	r31, 0x04	; 4
 898:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__prologue_saves__>
 89c:	6c 01       	movw	r12, r24
 89e:	7b 01       	movw	r14, r22
 8a0:	8a 01       	movw	r16, r20
 8a2:	fc 01       	movw	r30, r24
 8a4:	17 82       	std	Z+7, r1	; 0x07
 8a6:	16 82       	std	Z+6, r1	; 0x06
 8a8:	83 81       	ldd	r24, Z+3	; 0x03
 8aa:	81 ff       	sbrs	r24, 1
 8ac:	cc c1       	rjmp	.+920    	; 0xc46 <vfprintf+0x3b6>
 8ae:	ce 01       	movw	r24, r28
 8b0:	01 96       	adiw	r24, 0x01	; 1
 8b2:	3c 01       	movw	r6, r24
 8b4:	f6 01       	movw	r30, r12
 8b6:	93 81       	ldd	r25, Z+3	; 0x03
 8b8:	f7 01       	movw	r30, r14
 8ba:	93 fd       	sbrc	r25, 3
 8bc:	85 91       	lpm	r24, Z+
 8be:	93 ff       	sbrs	r25, 3
 8c0:	81 91       	ld	r24, Z+
 8c2:	7f 01       	movw	r14, r30
 8c4:	88 23       	and	r24, r24
 8c6:	09 f4       	brne	.+2      	; 0x8ca <vfprintf+0x3a>
 8c8:	ba c1       	rjmp	.+884    	; 0xc3e <vfprintf+0x3ae>
 8ca:	85 32       	cpi	r24, 0x25	; 37
 8cc:	39 f4       	brne	.+14     	; 0x8dc <vfprintf+0x4c>
 8ce:	93 fd       	sbrc	r25, 3
 8d0:	85 91       	lpm	r24, Z+
 8d2:	93 ff       	sbrs	r25, 3
 8d4:	81 91       	ld	r24, Z+
 8d6:	7f 01       	movw	r14, r30
 8d8:	85 32       	cpi	r24, 0x25	; 37
 8da:	29 f4       	brne	.+10     	; 0x8e6 <vfprintf+0x56>
 8dc:	b6 01       	movw	r22, r12
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <fputc>
 8e4:	e7 cf       	rjmp	.-50     	; 0x8b4 <vfprintf+0x24>
 8e6:	91 2c       	mov	r9, r1
 8e8:	21 2c       	mov	r2, r1
 8ea:	31 2c       	mov	r3, r1
 8ec:	ff e1       	ldi	r31, 0x1F	; 31
 8ee:	f3 15       	cp	r31, r3
 8f0:	d8 f0       	brcs	.+54     	; 0x928 <vfprintf+0x98>
 8f2:	8b 32       	cpi	r24, 0x2B	; 43
 8f4:	79 f0       	breq	.+30     	; 0x914 <vfprintf+0x84>
 8f6:	38 f4       	brcc	.+14     	; 0x906 <vfprintf+0x76>
 8f8:	80 32       	cpi	r24, 0x20	; 32
 8fa:	79 f0       	breq	.+30     	; 0x91a <vfprintf+0x8a>
 8fc:	83 32       	cpi	r24, 0x23	; 35
 8fe:	a1 f4       	brne	.+40     	; 0x928 <vfprintf+0x98>
 900:	23 2d       	mov	r18, r3
 902:	20 61       	ori	r18, 0x10	; 16
 904:	1d c0       	rjmp	.+58     	; 0x940 <vfprintf+0xb0>
 906:	8d 32       	cpi	r24, 0x2D	; 45
 908:	61 f0       	breq	.+24     	; 0x922 <vfprintf+0x92>
 90a:	80 33       	cpi	r24, 0x30	; 48
 90c:	69 f4       	brne	.+26     	; 0x928 <vfprintf+0x98>
 90e:	23 2d       	mov	r18, r3
 910:	21 60       	ori	r18, 0x01	; 1
 912:	16 c0       	rjmp	.+44     	; 0x940 <vfprintf+0xb0>
 914:	83 2d       	mov	r24, r3
 916:	82 60       	ori	r24, 0x02	; 2
 918:	38 2e       	mov	r3, r24
 91a:	e3 2d       	mov	r30, r3
 91c:	e4 60       	ori	r30, 0x04	; 4
 91e:	3e 2e       	mov	r3, r30
 920:	2a c0       	rjmp	.+84     	; 0x976 <vfprintf+0xe6>
 922:	f3 2d       	mov	r31, r3
 924:	f8 60       	ori	r31, 0x08	; 8
 926:	1d c0       	rjmp	.+58     	; 0x962 <vfprintf+0xd2>
 928:	37 fc       	sbrc	r3, 7
 92a:	2d c0       	rjmp	.+90     	; 0x986 <vfprintf+0xf6>
 92c:	20 ed       	ldi	r18, 0xD0	; 208
 92e:	28 0f       	add	r18, r24
 930:	2a 30       	cpi	r18, 0x0A	; 10
 932:	40 f0       	brcs	.+16     	; 0x944 <vfprintf+0xb4>
 934:	8e 32       	cpi	r24, 0x2E	; 46
 936:	b9 f4       	brne	.+46     	; 0x966 <vfprintf+0xd6>
 938:	36 fc       	sbrc	r3, 6
 93a:	81 c1       	rjmp	.+770    	; 0xc3e <vfprintf+0x3ae>
 93c:	23 2d       	mov	r18, r3
 93e:	20 64       	ori	r18, 0x40	; 64
 940:	32 2e       	mov	r3, r18
 942:	19 c0       	rjmp	.+50     	; 0x976 <vfprintf+0xe6>
 944:	36 fe       	sbrs	r3, 6
 946:	06 c0       	rjmp	.+12     	; 0x954 <vfprintf+0xc4>
 948:	8a e0       	ldi	r24, 0x0A	; 10
 94a:	98 9e       	mul	r9, r24
 94c:	20 0d       	add	r18, r0
 94e:	11 24       	eor	r1, r1
 950:	92 2e       	mov	r9, r18
 952:	11 c0       	rjmp	.+34     	; 0x976 <vfprintf+0xe6>
 954:	ea e0       	ldi	r30, 0x0A	; 10
 956:	2e 9e       	mul	r2, r30
 958:	20 0d       	add	r18, r0
 95a:	11 24       	eor	r1, r1
 95c:	22 2e       	mov	r2, r18
 95e:	f3 2d       	mov	r31, r3
 960:	f0 62       	ori	r31, 0x20	; 32
 962:	3f 2e       	mov	r3, r31
 964:	08 c0       	rjmp	.+16     	; 0x976 <vfprintf+0xe6>
 966:	8c 36       	cpi	r24, 0x6C	; 108
 968:	21 f4       	brne	.+8      	; 0x972 <vfprintf+0xe2>
 96a:	83 2d       	mov	r24, r3
 96c:	80 68       	ori	r24, 0x80	; 128
 96e:	38 2e       	mov	r3, r24
 970:	02 c0       	rjmp	.+4      	; 0x976 <vfprintf+0xe6>
 972:	88 36       	cpi	r24, 0x68	; 104
 974:	41 f4       	brne	.+16     	; 0x986 <vfprintf+0xf6>
 976:	f7 01       	movw	r30, r14
 978:	93 fd       	sbrc	r25, 3
 97a:	85 91       	lpm	r24, Z+
 97c:	93 ff       	sbrs	r25, 3
 97e:	81 91       	ld	r24, Z+
 980:	7f 01       	movw	r14, r30
 982:	81 11       	cpse	r24, r1
 984:	b3 cf       	rjmp	.-154    	; 0x8ec <vfprintf+0x5c>
 986:	98 2f       	mov	r25, r24
 988:	9f 7d       	andi	r25, 0xDF	; 223
 98a:	95 54       	subi	r25, 0x45	; 69
 98c:	93 30       	cpi	r25, 0x03	; 3
 98e:	28 f4       	brcc	.+10     	; 0x99a <vfprintf+0x10a>
 990:	0c 5f       	subi	r16, 0xFC	; 252
 992:	1f 4f       	sbci	r17, 0xFF	; 255
 994:	9f e3       	ldi	r25, 0x3F	; 63
 996:	99 83       	std	Y+1, r25	; 0x01
 998:	0d c0       	rjmp	.+26     	; 0x9b4 <vfprintf+0x124>
 99a:	83 36       	cpi	r24, 0x63	; 99
 99c:	31 f0       	breq	.+12     	; 0x9aa <vfprintf+0x11a>
 99e:	83 37       	cpi	r24, 0x73	; 115
 9a0:	71 f0       	breq	.+28     	; 0x9be <vfprintf+0x12e>
 9a2:	83 35       	cpi	r24, 0x53	; 83
 9a4:	09 f0       	breq	.+2      	; 0x9a8 <vfprintf+0x118>
 9a6:	59 c0       	rjmp	.+178    	; 0xa5a <vfprintf+0x1ca>
 9a8:	21 c0       	rjmp	.+66     	; 0x9ec <vfprintf+0x15c>
 9aa:	f8 01       	movw	r30, r16
 9ac:	80 81       	ld	r24, Z
 9ae:	89 83       	std	Y+1, r24	; 0x01
 9b0:	0e 5f       	subi	r16, 0xFE	; 254
 9b2:	1f 4f       	sbci	r17, 0xFF	; 255
 9b4:	88 24       	eor	r8, r8
 9b6:	83 94       	inc	r8
 9b8:	91 2c       	mov	r9, r1
 9ba:	53 01       	movw	r10, r6
 9bc:	13 c0       	rjmp	.+38     	; 0x9e4 <vfprintf+0x154>
 9be:	28 01       	movw	r4, r16
 9c0:	f2 e0       	ldi	r31, 0x02	; 2
 9c2:	4f 0e       	add	r4, r31
 9c4:	51 1c       	adc	r5, r1
 9c6:	f8 01       	movw	r30, r16
 9c8:	a0 80       	ld	r10, Z
 9ca:	b1 80       	ldd	r11, Z+1	; 0x01
 9cc:	36 fe       	sbrs	r3, 6
 9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <vfprintf+0x146>
 9d0:	69 2d       	mov	r22, r9
 9d2:	70 e0       	ldi	r23, 0x00	; 0
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <vfprintf+0x14a>
 9d6:	6f ef       	ldi	r22, 0xFF	; 255
 9d8:	7f ef       	ldi	r23, 0xFF	; 255
 9da:	c5 01       	movw	r24, r10
 9dc:	0e 94 34 06 	call	0xc68	; 0xc68 <strnlen>
 9e0:	4c 01       	movw	r8, r24
 9e2:	82 01       	movw	r16, r4
 9e4:	f3 2d       	mov	r31, r3
 9e6:	ff 77       	andi	r31, 0x7F	; 127
 9e8:	3f 2e       	mov	r3, r31
 9ea:	16 c0       	rjmp	.+44     	; 0xa18 <vfprintf+0x188>
 9ec:	28 01       	movw	r4, r16
 9ee:	22 e0       	ldi	r18, 0x02	; 2
 9f0:	42 0e       	add	r4, r18
 9f2:	51 1c       	adc	r5, r1
 9f4:	f8 01       	movw	r30, r16
 9f6:	a0 80       	ld	r10, Z
 9f8:	b1 80       	ldd	r11, Z+1	; 0x01
 9fa:	36 fe       	sbrs	r3, 6
 9fc:	03 c0       	rjmp	.+6      	; 0xa04 <vfprintf+0x174>
 9fe:	69 2d       	mov	r22, r9
 a00:	70 e0       	ldi	r23, 0x00	; 0
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <vfprintf+0x178>
 a04:	6f ef       	ldi	r22, 0xFF	; 255
 a06:	7f ef       	ldi	r23, 0xFF	; 255
 a08:	c5 01       	movw	r24, r10
 a0a:	0e 94 29 06 	call	0xc52	; 0xc52 <strnlen_P>
 a0e:	4c 01       	movw	r8, r24
 a10:	f3 2d       	mov	r31, r3
 a12:	f0 68       	ori	r31, 0x80	; 128
 a14:	3f 2e       	mov	r3, r31
 a16:	82 01       	movw	r16, r4
 a18:	33 fc       	sbrc	r3, 3
 a1a:	1b c0       	rjmp	.+54     	; 0xa52 <vfprintf+0x1c2>
 a1c:	82 2d       	mov	r24, r2
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	88 16       	cp	r8, r24
 a22:	99 06       	cpc	r9, r25
 a24:	b0 f4       	brcc	.+44     	; 0xa52 <vfprintf+0x1c2>
 a26:	b6 01       	movw	r22, r12
 a28:	80 e2       	ldi	r24, 0x20	; 32
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <fputc>
 a30:	2a 94       	dec	r2
 a32:	f4 cf       	rjmp	.-24     	; 0xa1c <vfprintf+0x18c>
 a34:	f5 01       	movw	r30, r10
 a36:	37 fc       	sbrc	r3, 7
 a38:	85 91       	lpm	r24, Z+
 a3a:	37 fe       	sbrs	r3, 7
 a3c:	81 91       	ld	r24, Z+
 a3e:	5f 01       	movw	r10, r30
 a40:	b6 01       	movw	r22, r12
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 3f 06 	call	0xc7e	; 0xc7e <fputc>
 a48:	21 10       	cpse	r2, r1
 a4a:	2a 94       	dec	r2
 a4c:	21 e0       	ldi	r18, 0x01	; 1
 a4e:	82 1a       	sub	r8, r18
 a50:	91 08       	sbc	r9, r1
 a52:	81 14       	cp	r8, r1
 a54:	91 04       	cpc	r9, r1
 a56:	71 f7       	brne	.-36     	; 0xa34 <vfprintf+0x1a4>
 a58:	e8 c0       	rjmp	.+464    	; 0xc2a <vfprintf+0x39a>
 a5a:	84 36       	cpi	r24, 0x64	; 100
 a5c:	11 f0       	breq	.+4      	; 0xa62 <vfprintf+0x1d2>
 a5e:	89 36       	cpi	r24, 0x69	; 105
 a60:	41 f5       	brne	.+80     	; 0xab2 <vfprintf+0x222>
 a62:	f8 01       	movw	r30, r16
 a64:	37 fe       	sbrs	r3, 7
 a66:	07 c0       	rjmp	.+14     	; 0xa76 <vfprintf+0x1e6>
 a68:	60 81       	ld	r22, Z
 a6a:	71 81       	ldd	r23, Z+1	; 0x01
 a6c:	82 81       	ldd	r24, Z+2	; 0x02
 a6e:	93 81       	ldd	r25, Z+3	; 0x03
 a70:	0c 5f       	subi	r16, 0xFC	; 252
 a72:	1f 4f       	sbci	r17, 0xFF	; 255
 a74:	08 c0       	rjmp	.+16     	; 0xa86 <vfprintf+0x1f6>
 a76:	60 81       	ld	r22, Z
 a78:	71 81       	ldd	r23, Z+1	; 0x01
 a7a:	07 2e       	mov	r0, r23
 a7c:	00 0c       	add	r0, r0
 a7e:	88 0b       	sbc	r24, r24
 a80:	99 0b       	sbc	r25, r25
 a82:	0e 5f       	subi	r16, 0xFE	; 254
 a84:	1f 4f       	sbci	r17, 0xFF	; 255
 a86:	f3 2d       	mov	r31, r3
 a88:	ff 76       	andi	r31, 0x6F	; 111
 a8a:	3f 2e       	mov	r3, r31
 a8c:	97 ff       	sbrs	r25, 7
 a8e:	09 c0       	rjmp	.+18     	; 0xaa2 <vfprintf+0x212>
 a90:	90 95       	com	r25
 a92:	80 95       	com	r24
 a94:	70 95       	com	r23
 a96:	61 95       	neg	r22
 a98:	7f 4f       	sbci	r23, 0xFF	; 255
 a9a:	8f 4f       	sbci	r24, 0xFF	; 255
 a9c:	9f 4f       	sbci	r25, 0xFF	; 255
 a9e:	f0 68       	ori	r31, 0x80	; 128
 aa0:	3f 2e       	mov	r3, r31
 aa2:	2a e0       	ldi	r18, 0x0A	; 10
 aa4:	30 e0       	ldi	r19, 0x00	; 0
 aa6:	a3 01       	movw	r20, r6
 aa8:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__ultoa_invert>
 aac:	88 2e       	mov	r8, r24
 aae:	86 18       	sub	r8, r6
 ab0:	45 c0       	rjmp	.+138    	; 0xb3c <vfprintf+0x2ac>
 ab2:	85 37       	cpi	r24, 0x75	; 117
 ab4:	31 f4       	brne	.+12     	; 0xac2 <vfprintf+0x232>
 ab6:	23 2d       	mov	r18, r3
 ab8:	2f 7e       	andi	r18, 0xEF	; 239
 aba:	b2 2e       	mov	r11, r18
 abc:	2a e0       	ldi	r18, 0x0A	; 10
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	25 c0       	rjmp	.+74     	; 0xb0c <vfprintf+0x27c>
 ac2:	93 2d       	mov	r25, r3
 ac4:	99 7f       	andi	r25, 0xF9	; 249
 ac6:	b9 2e       	mov	r11, r25
 ac8:	8f 36       	cpi	r24, 0x6F	; 111
 aca:	c1 f0       	breq	.+48     	; 0xafc <vfprintf+0x26c>
 acc:	18 f4       	brcc	.+6      	; 0xad4 <vfprintf+0x244>
 ace:	88 35       	cpi	r24, 0x58	; 88
 ad0:	79 f0       	breq	.+30     	; 0xaf0 <vfprintf+0x260>
 ad2:	b5 c0       	rjmp	.+362    	; 0xc3e <vfprintf+0x3ae>
 ad4:	80 37       	cpi	r24, 0x70	; 112
 ad6:	19 f0       	breq	.+6      	; 0xade <vfprintf+0x24e>
 ad8:	88 37       	cpi	r24, 0x78	; 120
 ada:	21 f0       	breq	.+8      	; 0xae4 <vfprintf+0x254>
 adc:	b0 c0       	rjmp	.+352    	; 0xc3e <vfprintf+0x3ae>
 ade:	e9 2f       	mov	r30, r25
 ae0:	e0 61       	ori	r30, 0x10	; 16
 ae2:	be 2e       	mov	r11, r30
 ae4:	b4 fe       	sbrs	r11, 4
 ae6:	0d c0       	rjmp	.+26     	; 0xb02 <vfprintf+0x272>
 ae8:	fb 2d       	mov	r31, r11
 aea:	f4 60       	ori	r31, 0x04	; 4
 aec:	bf 2e       	mov	r11, r31
 aee:	09 c0       	rjmp	.+18     	; 0xb02 <vfprintf+0x272>
 af0:	34 fe       	sbrs	r3, 4
 af2:	0a c0       	rjmp	.+20     	; 0xb08 <vfprintf+0x278>
 af4:	29 2f       	mov	r18, r25
 af6:	26 60       	ori	r18, 0x06	; 6
 af8:	b2 2e       	mov	r11, r18
 afa:	06 c0       	rjmp	.+12     	; 0xb08 <vfprintf+0x278>
 afc:	28 e0       	ldi	r18, 0x08	; 8
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	05 c0       	rjmp	.+10     	; 0xb0c <vfprintf+0x27c>
 b02:	20 e1       	ldi	r18, 0x10	; 16
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <vfprintf+0x27c>
 b08:	20 e1       	ldi	r18, 0x10	; 16
 b0a:	32 e0       	ldi	r19, 0x02	; 2
 b0c:	f8 01       	movw	r30, r16
 b0e:	b7 fe       	sbrs	r11, 7
 b10:	07 c0       	rjmp	.+14     	; 0xb20 <vfprintf+0x290>
 b12:	60 81       	ld	r22, Z
 b14:	71 81       	ldd	r23, Z+1	; 0x01
 b16:	82 81       	ldd	r24, Z+2	; 0x02
 b18:	93 81       	ldd	r25, Z+3	; 0x03
 b1a:	0c 5f       	subi	r16, 0xFC	; 252
 b1c:	1f 4f       	sbci	r17, 0xFF	; 255
 b1e:	06 c0       	rjmp	.+12     	; 0xb2c <vfprintf+0x29c>
 b20:	60 81       	ld	r22, Z
 b22:	71 81       	ldd	r23, Z+1	; 0x01
 b24:	80 e0       	ldi	r24, 0x00	; 0
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	0e 5f       	subi	r16, 0xFE	; 254
 b2a:	1f 4f       	sbci	r17, 0xFF	; 255
 b2c:	a3 01       	movw	r20, r6
 b2e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__ultoa_invert>
 b32:	88 2e       	mov	r8, r24
 b34:	86 18       	sub	r8, r6
 b36:	fb 2d       	mov	r31, r11
 b38:	ff 77       	andi	r31, 0x7F	; 127
 b3a:	3f 2e       	mov	r3, r31
 b3c:	36 fe       	sbrs	r3, 6
 b3e:	0d c0       	rjmp	.+26     	; 0xb5a <vfprintf+0x2ca>
 b40:	23 2d       	mov	r18, r3
 b42:	2e 7f       	andi	r18, 0xFE	; 254
 b44:	a2 2e       	mov	r10, r18
 b46:	89 14       	cp	r8, r9
 b48:	58 f4       	brcc	.+22     	; 0xb60 <vfprintf+0x2d0>
 b4a:	34 fe       	sbrs	r3, 4
 b4c:	0b c0       	rjmp	.+22     	; 0xb64 <vfprintf+0x2d4>
 b4e:	32 fc       	sbrc	r3, 2
 b50:	09 c0       	rjmp	.+18     	; 0xb64 <vfprintf+0x2d4>
 b52:	83 2d       	mov	r24, r3
 b54:	8e 7e       	andi	r24, 0xEE	; 238
 b56:	a8 2e       	mov	r10, r24
 b58:	05 c0       	rjmp	.+10     	; 0xb64 <vfprintf+0x2d4>
 b5a:	b8 2c       	mov	r11, r8
 b5c:	a3 2c       	mov	r10, r3
 b5e:	03 c0       	rjmp	.+6      	; 0xb66 <vfprintf+0x2d6>
 b60:	b8 2c       	mov	r11, r8
 b62:	01 c0       	rjmp	.+2      	; 0xb66 <vfprintf+0x2d6>
 b64:	b9 2c       	mov	r11, r9
 b66:	a4 fe       	sbrs	r10, 4
 b68:	0f c0       	rjmp	.+30     	; 0xb88 <vfprintf+0x2f8>
 b6a:	fe 01       	movw	r30, r28
 b6c:	e8 0d       	add	r30, r8
 b6e:	f1 1d       	adc	r31, r1
 b70:	80 81       	ld	r24, Z
 b72:	80 33       	cpi	r24, 0x30	; 48
 b74:	21 f4       	brne	.+8      	; 0xb7e <vfprintf+0x2ee>
 b76:	9a 2d       	mov	r25, r10
 b78:	99 7e       	andi	r25, 0xE9	; 233
 b7a:	a9 2e       	mov	r10, r25
 b7c:	09 c0       	rjmp	.+18     	; 0xb90 <vfprintf+0x300>
 b7e:	a2 fe       	sbrs	r10, 2
 b80:	06 c0       	rjmp	.+12     	; 0xb8e <vfprintf+0x2fe>
 b82:	b3 94       	inc	r11
 b84:	b3 94       	inc	r11
 b86:	04 c0       	rjmp	.+8      	; 0xb90 <vfprintf+0x300>
 b88:	8a 2d       	mov	r24, r10
 b8a:	86 78       	andi	r24, 0x86	; 134
 b8c:	09 f0       	breq	.+2      	; 0xb90 <vfprintf+0x300>
 b8e:	b3 94       	inc	r11
 b90:	a3 fc       	sbrc	r10, 3
 b92:	11 c0       	rjmp	.+34     	; 0xbb6 <vfprintf+0x326>
 b94:	a0 fe       	sbrs	r10, 0
 b96:	06 c0       	rjmp	.+12     	; 0xba4 <vfprintf+0x314>
 b98:	b2 14       	cp	r11, r2
 b9a:	88 f4       	brcc	.+34     	; 0xbbe <vfprintf+0x32e>
 b9c:	28 0c       	add	r2, r8
 b9e:	92 2c       	mov	r9, r2
 ba0:	9b 18       	sub	r9, r11
 ba2:	0e c0       	rjmp	.+28     	; 0xbc0 <vfprintf+0x330>
 ba4:	b2 14       	cp	r11, r2
 ba6:	60 f4       	brcc	.+24     	; 0xbc0 <vfprintf+0x330>
 ba8:	b6 01       	movw	r22, r12
 baa:	80 e2       	ldi	r24, 0x20	; 32
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	0e 94 3f 06 	call	0xc7e	; 0xc7e <fputc>
 bb2:	b3 94       	inc	r11
 bb4:	f7 cf       	rjmp	.-18     	; 0xba4 <vfprintf+0x314>
 bb6:	b2 14       	cp	r11, r2
 bb8:	18 f4       	brcc	.+6      	; 0xbc0 <vfprintf+0x330>
 bba:	2b 18       	sub	r2, r11
 bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <vfprintf+0x332>
 bbe:	98 2c       	mov	r9, r8
 bc0:	21 2c       	mov	r2, r1
 bc2:	a4 fe       	sbrs	r10, 4
 bc4:	10 c0       	rjmp	.+32     	; 0xbe6 <vfprintf+0x356>
 bc6:	b6 01       	movw	r22, r12
 bc8:	80 e3       	ldi	r24, 0x30	; 48
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <fputc>
 bd0:	a2 fe       	sbrs	r10, 2
 bd2:	17 c0       	rjmp	.+46     	; 0xc02 <vfprintf+0x372>
 bd4:	a1 fc       	sbrc	r10, 1
 bd6:	03 c0       	rjmp	.+6      	; 0xbde <vfprintf+0x34e>
 bd8:	88 e7       	ldi	r24, 0x78	; 120
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <vfprintf+0x352>
 bde:	88 e5       	ldi	r24, 0x58	; 88
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	b6 01       	movw	r22, r12
 be4:	0c c0       	rjmp	.+24     	; 0xbfe <vfprintf+0x36e>
 be6:	8a 2d       	mov	r24, r10
 be8:	86 78       	andi	r24, 0x86	; 134
 bea:	59 f0       	breq	.+22     	; 0xc02 <vfprintf+0x372>
 bec:	a1 fe       	sbrs	r10, 1
 bee:	02 c0       	rjmp	.+4      	; 0xbf4 <vfprintf+0x364>
 bf0:	8b e2       	ldi	r24, 0x2B	; 43
 bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <vfprintf+0x366>
 bf4:	80 e2       	ldi	r24, 0x20	; 32
 bf6:	a7 fc       	sbrc	r10, 7
 bf8:	8d e2       	ldi	r24, 0x2D	; 45
 bfa:	b6 01       	movw	r22, r12
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	0e 94 3f 06 	call	0xc7e	; 0xc7e <fputc>
 c02:	89 14       	cp	r8, r9
 c04:	38 f4       	brcc	.+14     	; 0xc14 <vfprintf+0x384>
 c06:	b6 01       	movw	r22, r12
 c08:	80 e3       	ldi	r24, 0x30	; 48
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <fputc>
 c10:	9a 94       	dec	r9
 c12:	f7 cf       	rjmp	.-18     	; 0xc02 <vfprintf+0x372>
 c14:	8a 94       	dec	r8
 c16:	f3 01       	movw	r30, r6
 c18:	e8 0d       	add	r30, r8
 c1a:	f1 1d       	adc	r31, r1
 c1c:	80 81       	ld	r24, Z
 c1e:	b6 01       	movw	r22, r12
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	0e 94 3f 06 	call	0xc7e	; 0xc7e <fputc>
 c26:	81 10       	cpse	r8, r1
 c28:	f5 cf       	rjmp	.-22     	; 0xc14 <vfprintf+0x384>
 c2a:	22 20       	and	r2, r2
 c2c:	09 f4       	brne	.+2      	; 0xc30 <vfprintf+0x3a0>
 c2e:	42 ce       	rjmp	.-892    	; 0x8b4 <vfprintf+0x24>
 c30:	b6 01       	movw	r22, r12
 c32:	80 e2       	ldi	r24, 0x20	; 32
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	0e 94 3f 06 	call	0xc7e	; 0xc7e <fputc>
 c3a:	2a 94       	dec	r2
 c3c:	f6 cf       	rjmp	.-20     	; 0xc2a <vfprintf+0x39a>
 c3e:	f6 01       	movw	r30, r12
 c40:	86 81       	ldd	r24, Z+6	; 0x06
 c42:	97 81       	ldd	r25, Z+7	; 0x07
 c44:	02 c0       	rjmp	.+4      	; 0xc4a <vfprintf+0x3ba>
 c46:	8f ef       	ldi	r24, 0xFF	; 255
 c48:	9f ef       	ldi	r25, 0xFF	; 255
 c4a:	2b 96       	adiw	r28, 0x0b	; 11
 c4c:	e2 e1       	ldi	r30, 0x12	; 18
 c4e:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__epilogue_restores__>

00000c52 <strnlen_P>:
 c52:	fc 01       	movw	r30, r24
 c54:	05 90       	lpm	r0, Z+
 c56:	61 50       	subi	r22, 0x01	; 1
 c58:	70 40       	sbci	r23, 0x00	; 0
 c5a:	01 10       	cpse	r0, r1
 c5c:	d8 f7       	brcc	.-10     	; 0xc54 <strnlen_P+0x2>
 c5e:	80 95       	com	r24
 c60:	90 95       	com	r25
 c62:	8e 0f       	add	r24, r30
 c64:	9f 1f       	adc	r25, r31
 c66:	08 95       	ret

00000c68 <strnlen>:
 c68:	fc 01       	movw	r30, r24
 c6a:	61 50       	subi	r22, 0x01	; 1
 c6c:	70 40       	sbci	r23, 0x00	; 0
 c6e:	01 90       	ld	r0, Z+
 c70:	01 10       	cpse	r0, r1
 c72:	d8 f7       	brcc	.-10     	; 0xc6a <strnlen+0x2>
 c74:	80 95       	com	r24
 c76:	90 95       	com	r25
 c78:	8e 0f       	add	r24, r30
 c7a:	9f 1f       	adc	r25, r31
 c7c:	08 95       	ret

00000c7e <fputc>:
 c7e:	0f 93       	push	r16
 c80:	1f 93       	push	r17
 c82:	cf 93       	push	r28
 c84:	df 93       	push	r29
 c86:	fb 01       	movw	r30, r22
 c88:	23 81       	ldd	r18, Z+3	; 0x03
 c8a:	21 fd       	sbrc	r18, 1
 c8c:	03 c0       	rjmp	.+6      	; 0xc94 <fputc+0x16>
 c8e:	8f ef       	ldi	r24, 0xFF	; 255
 c90:	9f ef       	ldi	r25, 0xFF	; 255
 c92:	2c c0       	rjmp	.+88     	; 0xcec <fputc+0x6e>
 c94:	22 ff       	sbrs	r18, 2
 c96:	16 c0       	rjmp	.+44     	; 0xcc4 <fputc+0x46>
 c98:	46 81       	ldd	r20, Z+6	; 0x06
 c9a:	57 81       	ldd	r21, Z+7	; 0x07
 c9c:	24 81       	ldd	r18, Z+4	; 0x04
 c9e:	35 81       	ldd	r19, Z+5	; 0x05
 ca0:	42 17       	cp	r20, r18
 ca2:	53 07       	cpc	r21, r19
 ca4:	44 f4       	brge	.+16     	; 0xcb6 <fputc+0x38>
 ca6:	a0 81       	ld	r26, Z
 ca8:	b1 81       	ldd	r27, Z+1	; 0x01
 caa:	9d 01       	movw	r18, r26
 cac:	2f 5f       	subi	r18, 0xFF	; 255
 cae:	3f 4f       	sbci	r19, 0xFF	; 255
 cb0:	31 83       	std	Z+1, r19	; 0x01
 cb2:	20 83       	st	Z, r18
 cb4:	8c 93       	st	X, r24
 cb6:	26 81       	ldd	r18, Z+6	; 0x06
 cb8:	37 81       	ldd	r19, Z+7	; 0x07
 cba:	2f 5f       	subi	r18, 0xFF	; 255
 cbc:	3f 4f       	sbci	r19, 0xFF	; 255
 cbe:	37 83       	std	Z+7, r19	; 0x07
 cc0:	26 83       	std	Z+6, r18	; 0x06
 cc2:	14 c0       	rjmp	.+40     	; 0xcec <fputc+0x6e>
 cc4:	8b 01       	movw	r16, r22
 cc6:	ec 01       	movw	r28, r24
 cc8:	fb 01       	movw	r30, r22
 cca:	00 84       	ldd	r0, Z+8	; 0x08
 ccc:	f1 85       	ldd	r31, Z+9	; 0x09
 cce:	e0 2d       	mov	r30, r0
 cd0:	09 95       	icall
 cd2:	89 2b       	or	r24, r25
 cd4:	e1 f6       	brne	.-72     	; 0xc8e <fputc+0x10>
 cd6:	d8 01       	movw	r26, r16
 cd8:	16 96       	adiw	r26, 0x06	; 6
 cda:	8d 91       	ld	r24, X+
 cdc:	9c 91       	ld	r25, X
 cde:	17 97       	sbiw	r26, 0x07	; 7
 ce0:	01 96       	adiw	r24, 0x01	; 1
 ce2:	17 96       	adiw	r26, 0x07	; 7
 ce4:	9c 93       	st	X, r25
 ce6:	8e 93       	st	-X, r24
 ce8:	16 97       	sbiw	r26, 0x06	; 6
 cea:	ce 01       	movw	r24, r28
 cec:	df 91       	pop	r29
 cee:	cf 91       	pop	r28
 cf0:	1f 91       	pop	r17
 cf2:	0f 91       	pop	r16
 cf4:	08 95       	ret

00000cf6 <__ultoa_invert>:
 cf6:	fa 01       	movw	r30, r20
 cf8:	aa 27       	eor	r26, r26
 cfa:	28 30       	cpi	r18, 0x08	; 8
 cfc:	51 f1       	breq	.+84     	; 0xd52 <__ultoa_invert+0x5c>
 cfe:	20 31       	cpi	r18, 0x10	; 16
 d00:	81 f1       	breq	.+96     	; 0xd62 <__ultoa_invert+0x6c>
 d02:	e8 94       	clt
 d04:	6f 93       	push	r22
 d06:	6e 7f       	andi	r22, 0xFE	; 254
 d08:	6e 5f       	subi	r22, 0xFE	; 254
 d0a:	7f 4f       	sbci	r23, 0xFF	; 255
 d0c:	8f 4f       	sbci	r24, 0xFF	; 255
 d0e:	9f 4f       	sbci	r25, 0xFF	; 255
 d10:	af 4f       	sbci	r26, 0xFF	; 255
 d12:	b1 e0       	ldi	r27, 0x01	; 1
 d14:	3e d0       	rcall	.+124    	; 0xd92 <__ultoa_invert+0x9c>
 d16:	b4 e0       	ldi	r27, 0x04	; 4
 d18:	3c d0       	rcall	.+120    	; 0xd92 <__ultoa_invert+0x9c>
 d1a:	67 0f       	add	r22, r23
 d1c:	78 1f       	adc	r23, r24
 d1e:	89 1f       	adc	r24, r25
 d20:	9a 1f       	adc	r25, r26
 d22:	a1 1d       	adc	r26, r1
 d24:	68 0f       	add	r22, r24
 d26:	79 1f       	adc	r23, r25
 d28:	8a 1f       	adc	r24, r26
 d2a:	91 1d       	adc	r25, r1
 d2c:	a1 1d       	adc	r26, r1
 d2e:	6a 0f       	add	r22, r26
 d30:	71 1d       	adc	r23, r1
 d32:	81 1d       	adc	r24, r1
 d34:	91 1d       	adc	r25, r1
 d36:	a1 1d       	adc	r26, r1
 d38:	20 d0       	rcall	.+64     	; 0xd7a <__ultoa_invert+0x84>
 d3a:	09 f4       	brne	.+2      	; 0xd3e <__ultoa_invert+0x48>
 d3c:	68 94       	set
 d3e:	3f 91       	pop	r19
 d40:	2a e0       	ldi	r18, 0x0A	; 10
 d42:	26 9f       	mul	r18, r22
 d44:	11 24       	eor	r1, r1
 d46:	30 19       	sub	r19, r0
 d48:	30 5d       	subi	r19, 0xD0	; 208
 d4a:	31 93       	st	Z+, r19
 d4c:	de f6       	brtc	.-74     	; 0xd04 <__ultoa_invert+0xe>
 d4e:	cf 01       	movw	r24, r30
 d50:	08 95       	ret
 d52:	46 2f       	mov	r20, r22
 d54:	47 70       	andi	r20, 0x07	; 7
 d56:	40 5d       	subi	r20, 0xD0	; 208
 d58:	41 93       	st	Z+, r20
 d5a:	b3 e0       	ldi	r27, 0x03	; 3
 d5c:	0f d0       	rcall	.+30     	; 0xd7c <__ultoa_invert+0x86>
 d5e:	c9 f7       	brne	.-14     	; 0xd52 <__ultoa_invert+0x5c>
 d60:	f6 cf       	rjmp	.-20     	; 0xd4e <__ultoa_invert+0x58>
 d62:	46 2f       	mov	r20, r22
 d64:	4f 70       	andi	r20, 0x0F	; 15
 d66:	40 5d       	subi	r20, 0xD0	; 208
 d68:	4a 33       	cpi	r20, 0x3A	; 58
 d6a:	18 f0       	brcs	.+6      	; 0xd72 <__ultoa_invert+0x7c>
 d6c:	49 5d       	subi	r20, 0xD9	; 217
 d6e:	31 fd       	sbrc	r19, 1
 d70:	40 52       	subi	r20, 0x20	; 32
 d72:	41 93       	st	Z+, r20
 d74:	02 d0       	rcall	.+4      	; 0xd7a <__ultoa_invert+0x84>
 d76:	a9 f7       	brne	.-22     	; 0xd62 <__ultoa_invert+0x6c>
 d78:	ea cf       	rjmp	.-44     	; 0xd4e <__ultoa_invert+0x58>
 d7a:	b4 e0       	ldi	r27, 0x04	; 4
 d7c:	a6 95       	lsr	r26
 d7e:	97 95       	ror	r25
 d80:	87 95       	ror	r24
 d82:	77 95       	ror	r23
 d84:	67 95       	ror	r22
 d86:	ba 95       	dec	r27
 d88:	c9 f7       	brne	.-14     	; 0xd7c <__ultoa_invert+0x86>
 d8a:	00 97       	sbiw	r24, 0x00	; 0
 d8c:	61 05       	cpc	r22, r1
 d8e:	71 05       	cpc	r23, r1
 d90:	08 95       	ret
 d92:	9b 01       	movw	r18, r22
 d94:	ac 01       	movw	r20, r24
 d96:	0a 2e       	mov	r0, r26
 d98:	06 94       	lsr	r0
 d9a:	57 95       	ror	r21
 d9c:	47 95       	ror	r20
 d9e:	37 95       	ror	r19
 da0:	27 95       	ror	r18
 da2:	ba 95       	dec	r27
 da4:	c9 f7       	brne	.-14     	; 0xd98 <__ultoa_invert+0xa2>
 da6:	62 0f       	add	r22, r18
 da8:	73 1f       	adc	r23, r19
 daa:	84 1f       	adc	r24, r20
 dac:	95 1f       	adc	r25, r21
 dae:	a0 1d       	adc	r26, r0
 db0:	08 95       	ret

00000db2 <__prologue_saves__>:
 db2:	2f 92       	push	r2
 db4:	3f 92       	push	r3
 db6:	4f 92       	push	r4
 db8:	5f 92       	push	r5
 dba:	6f 92       	push	r6
 dbc:	7f 92       	push	r7
 dbe:	8f 92       	push	r8
 dc0:	9f 92       	push	r9
 dc2:	af 92       	push	r10
 dc4:	bf 92       	push	r11
 dc6:	cf 92       	push	r12
 dc8:	df 92       	push	r13
 dca:	ef 92       	push	r14
 dcc:	ff 92       	push	r15
 dce:	0f 93       	push	r16
 dd0:	1f 93       	push	r17
 dd2:	cf 93       	push	r28
 dd4:	df 93       	push	r29
 dd6:	cd b7       	in	r28, 0x3d	; 61
 dd8:	de b7       	in	r29, 0x3e	; 62
 dda:	ca 1b       	sub	r28, r26
 ddc:	db 0b       	sbc	r29, r27
 dde:	0f b6       	in	r0, 0x3f	; 63
 de0:	f8 94       	cli
 de2:	de bf       	out	0x3e, r29	; 62
 de4:	0f be       	out	0x3f, r0	; 63
 de6:	cd bf       	out	0x3d, r28	; 61
 de8:	09 94       	ijmp

00000dea <__epilogue_restores__>:
 dea:	2a 88       	ldd	r2, Y+18	; 0x12
 dec:	39 88       	ldd	r3, Y+17	; 0x11
 dee:	48 88       	ldd	r4, Y+16	; 0x10
 df0:	5f 84       	ldd	r5, Y+15	; 0x0f
 df2:	6e 84       	ldd	r6, Y+14	; 0x0e
 df4:	7d 84       	ldd	r7, Y+13	; 0x0d
 df6:	8c 84       	ldd	r8, Y+12	; 0x0c
 df8:	9b 84       	ldd	r9, Y+11	; 0x0b
 dfa:	aa 84       	ldd	r10, Y+10	; 0x0a
 dfc:	b9 84       	ldd	r11, Y+9	; 0x09
 dfe:	c8 84       	ldd	r12, Y+8	; 0x08
 e00:	df 80       	ldd	r13, Y+7	; 0x07
 e02:	ee 80       	ldd	r14, Y+6	; 0x06
 e04:	fd 80       	ldd	r15, Y+5	; 0x05
 e06:	0c 81       	ldd	r16, Y+4	; 0x04
 e08:	1b 81       	ldd	r17, Y+3	; 0x03
 e0a:	aa 81       	ldd	r26, Y+2	; 0x02
 e0c:	b9 81       	ldd	r27, Y+1	; 0x01
 e0e:	ce 0f       	add	r28, r30
 e10:	d1 1d       	adc	r29, r1
 e12:	0f b6       	in	r0, 0x3f	; 63
 e14:	f8 94       	cli
 e16:	de bf       	out	0x3e, r29	; 62
 e18:	0f be       	out	0x3f, r0	; 63
 e1a:	cd bf       	out	0x3d, r28	; 61
 e1c:	ed 01       	movw	r28, r26
 e1e:	08 95       	ret

00000e20 <_exit>:
 e20:	f8 94       	cli

00000e22 <__stop_program>:
 e22:	ff cf       	rjmp	.-2      	; 0xe22 <__stop_program>
